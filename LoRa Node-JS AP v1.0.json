[
    {
        "id": "d2eb47fc2fa390b1",
        "type": "tab",
        "label": "Extracción MQTT",
        "disabled": false,
        "info": ""
    },
    {
        "id": "89ac413fc4a2dfe4",
        "type": "tab",
        "label": "Carga en SQL",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d018cc37328048f5",
        "type": "tab",
        "label": "Modbus",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3a458a9d04345417",
        "type": "tab",
        "label": "Pantalla General",
        "disabled": true,
        "info": ""
    },
    {
        "id": "a59f2133521cf34f",
        "type": "tab",
        "label": "Raspberry Parameters",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7c0e103946607b66",
        "type": "mqtt-broker",
        "name": "Local",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1f5ebf89.410ca",
        "type": "mqtt-broker",
        "name": "mqtt-mt",
        "broker": "127.0.0.1",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "58f8b468.a5402c",
        "type": "ui_group",
        "name": "Calidad de Señal",
        "tab": "947ec8c4.eb86a8",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "a1781dce.1af3a",
        "type": "ui_group",
        "name": "Entradas Analógicas",
        "tab": "947ec8c4.eb86a8",
        "order": 2,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "2f06ff7.de84f",
        "type": "Stackhero-MySQL-Server",
        "name": "",
        "host": "localhost",
        "port": "3306",
        "tls": false,
        "database": "pozos"
    },
    {
        "id": "f4cedeae.992bc",
        "type": "modbus-client",
        "name": "Localhost",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "10.193.112.21",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "947ec8c4.eb86a8",
        "type": "ui_tab",
        "name": "Pozo 54 - A",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "eb94c91e.c85878",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "70de68d8.81f418",
        "type": "ui_tab",
        "name": "Pozo 38 - B",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "de74228a.9f29d",
        "type": "ui_group",
        "name": "Calidad de Señal",
        "tab": "70de68d8.81f418",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "2737b114.14209e",
        "type": "ui_tab",
        "name": "Pozo 41 - C",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "3475779b.38bbd8",
        "type": "ui_tab",
        "name": "Pozo 48 - D",
        "icon": "dashboard",
        "order": 5,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1e7d9c1b.6028d4",
        "type": "ui_tab",
        "name": "Pozo 47 - E",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1e012668.f5b0aa",
        "type": "ui_group",
        "name": "Entradas Analógicas",
        "tab": "70de68d8.81f418",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "df73c7be.3f8818",
        "type": "ui_group",
        "name": "Calidad de Señal",
        "tab": "2737b114.14209e",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "8bde4a95.cdb948",
        "type": "ui_group",
        "name": "Entradas Analógicas",
        "tab": "2737b114.14209e",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "a2108fed.d840d",
        "type": "ui_group",
        "name": "Calidad de Señal",
        "tab": "3475779b.38bbd8",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "4af1cec7.334d1",
        "type": "ui_group",
        "name": "Entradas Analógicas",
        "tab": "3475779b.38bbd8",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "6594a91b.85a3f8",
        "type": "ui_group",
        "name": "Calidad de Señal",
        "tab": "1e7d9c1b.6028d4",
        "order": 1,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "fd517ba4.6ac628",
        "type": "ui_group",
        "name": "Entradas Analógicas",
        "tab": "1e7d9c1b.6028d4",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "f07bded1.8c048",
        "type": "ui_group",
        "name": "Digitales",
        "tab": "947ec8c4.eb86a8",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "75c324f2.5d4b2c",
        "type": "ui_group",
        "name": "Digitales",
        "tab": "70de68d8.81f418",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "5f4e301.92c2dd",
        "type": "ui_group",
        "name": "Digitales",
        "tab": "2737b114.14209e",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "aabdc5b5.69b6e8",
        "type": "ui_group",
        "name": "Digitales",
        "tab": "3475779b.38bbd8",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "c55326d4.6f5ca8",
        "type": "ui_group",
        "name": "Digitales",
        "tab": "1e7d9c1b.6028d4",
        "order": 3,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "6a53f40c.0fed5c",
        "type": "ui_group",
        "name": "Col1",
        "tab": "6a82c235.9af2bc",
        "order": 1,
        "disp": false,
        "width": 10
    },
    {
        "id": "5f889de1.b0a8a4",
        "type": "ui_group",
        "name": "Controles",
        "tab": "6a82c235.9af2bc",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": false
    },
    {
        "id": "619f1ca9.274054",
        "type": "ui_group",
        "name": "Col2",
        "tab": "6a82c235.9af2bc",
        "order": 2,
        "disp": false,
        "width": 10
    },
    {
        "id": "119f5c5f.ffe4a4",
        "type": "ui_group",
        "name": "Col3",
        "tab": "6a82c235.9af2bc",
        "order": 3,
        "disp": false,
        "width": 10
    },
    {
        "id": "6a82c235.9af2bc",
        "type": "ui_tab",
        "name": "Raspberry",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a3bfce3.428233",
        "type": "ui_group",
        "name": "Intervalo entre datos",
        "tab": "947ec8c4.eb86a8",
        "order": 4,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "2f44b6a0.cc2b6a",
        "type": "ui_group",
        "name": "Intervalo entre datos",
        "tab": "70de68d8.81f418",
        "order": 4,
        "disp": true,
        "width": 24,
        "collapse": false
    },
    {
        "id": "947c5b62.718af8",
        "type": "ui_group",
        "name": "Intervalo entre datos",
        "tab": "2737b114.14209e",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "66b651bb.b70da",
        "type": "ui_group",
        "name": "Intervalo entre datos",
        "tab": "3475779b.38bbd8",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "a079b2a5.c7085",
        "type": "ui_group",
        "name": "Intervalo entre datos",
        "tab": "1e7d9c1b.6028d4",
        "order": 4,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "95c149c9.9293a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "bb0c2310.c98e7",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "76983ab1.33f604",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 5,
        "width": 3,
        "height": 1
    },
    {
        "id": "1f1d2fa5.f3847",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "9fbd27ec.d04f48",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "4311b588.20e9bc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "e5957a72.8d7738",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "72cbeba9.2c2254",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "5f4e301.92c2dd",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "7f36f59f.132e6c",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "8e63734d.af0b5",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 3,
        "width": 3,
        "height": 1
    },
    {
        "id": "5bb14356.6dc8cc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 5,
        "width": 2,
        "height": 1
    },
    {
        "id": "4287812f.69301",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "44b643b.f70a2bc",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "df18b383.a9686",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 9,
        "width": 3,
        "height": 1
    },
    {
        "id": "f3e662f7.644ab",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "71be1ebb.0ff4f",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "aabdc5b5.69b6e8",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "e2dde0c1.28dd9",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "22657362.eb23ac",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "679df94e.e27778",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 5,
        "width": 3,
        "height": 1
    },
    {
        "id": "9fd56bb4.bbb188",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "efb3f430.0681a8",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "4ca5247a.3a62ac",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "5ee90ffc.a0335",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 10,
        "width": 3,
        "height": 1
    },
    {
        "id": "21c36267.fcbe3e",
        "type": "ui_spacer",
        "name": "spacer",
        "group": "c55326d4.6f5ca8",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "160004c0d060895c",
        "type": "ui_group",
        "name": "Modificar escalado",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "5f4578032aaffb3f",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "ab4ae53cf57954c9",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 3,
        "width": 4,
        "height": 1
    },
    {
        "id": "243ebbf1b4beda05",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 5,
        "width": 8,
        "height": 1
    },
    {
        "id": "0c5b65ac3ba629d0",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "5bcd7a14fec7e1e8",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 7,
        "width": 4,
        "height": 1
    },
    {
        "id": "9d97de8398f29b8a",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "f07bded1.8c048",
        "order": 8,
        "width": 8,
        "height": 1
    },
    {
        "id": "f950f4efb590f4a3",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 1,
        "width": 2,
        "height": 1
    },
    {
        "id": "9844b3a60a944236",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 3,
        "width": 5,
        "height": 1
    },
    {
        "id": "8e2ab487d1f7f66f",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 5,
        "width": 7,
        "height": 1
    },
    {
        "id": "9beadff3a9210f0e",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "d97865ae358f306d",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 7,
        "width": 5,
        "height": 1
    },
    {
        "id": "a2c09354e41993c0",
        "type": "ui_spacer",
        "z": "d018cc37328048f5",
        "name": "spacer",
        "group": "75c324f2.5d4b2c",
        "order": 8,
        "width": 7,
        "height": 1
    },
    {
        "id": "3d2c5fb320d239c1",
        "type": "ui_tab",
        "name": "General",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "aa31efabc380905c",
        "type": "ui_group",
        "name": "Modificar escalado",
        "tab": "3d2c5fb320d239c1",
        "order": 1,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "2686289828e6b176",
        "type": "ui_group",
        "name": "Estado general de pozos",
        "tab": "3d2c5fb320d239c1",
        "order": 2,
        "disp": true,
        "width": 10,
        "collapse": false
    },
    {
        "id": "d160f7d66748447a",
        "type": "ui_group",
        "name": "Default",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "20",
        "collapse": false
    },
    {
        "id": "e947b32ee3e2be41",
        "type": "mqtt in",
        "z": "d2eb47fc2fa390b1",
        "name": "MQTT-MT",
        "topic": "ursalink/test1/+",
        "qos": "2",
        "datatype": "auto",
        "broker": "1f5ebf89.410ca",
        "nl": false,
        "rap": false,
        "x": 100,
        "y": 640,
        "wires": [
            [
                "e1cb87c90323d595"
            ]
        ]
    },
    {
        "id": "e1cb87c90323d595",
        "type": "json",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 250,
        "y": 640,
        "wires": [
            [
                "7666456ee636fc6b"
            ]
        ]
    },
    {
        "id": "c0bf7bec83bb174d",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Switch UC1122 A",
        "property": "$string(msg.payload.data)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "regex",
                "v": "EQ..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "Eg..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "A...",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "CQE.",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 100,
        "wires": [
            [
                "405498959c336ce5"
            ],
            [
                "b837bec07374d92f"
            ],
            [
                "132b32278c616ddd"
            ],
            [
                "e5c3d67a8c659261"
            ]
        ]
    },
    {
        "id": "7666456ee636fc6b",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Filtro Válido",
        "property": "$string(msg.payload)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "cont",
                "v": "rxInfo",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 410,
        "y": 640,
        "wires": [
            [
                "52093633a2925f62"
            ]
        ]
    },
    {
        "id": "ea9edae5424e9737",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "52093633a2925f62",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Filtro EUI",
        "property": "$string(msg.payload.deviceName)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "Nodo A",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Nodo B",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Nodo C",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Nodo D",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Nodo E",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 580,
        "y": 640,
        "wires": [
            [
                "c0bf7bec83bb174d",
                "b6bec9f4429cbfe8"
            ],
            [
                "7e4af1a8f8f8ef2d",
                "ca6fb4ef410e6c84"
            ],
            [
                "343af20c84d3a302"
            ],
            [
                "76080c490b333a0e"
            ],
            [
                "86e8135f9f12c67d",
                "43fcb54a1d615251"
            ]
        ]
    },
    {
        "id": "7e4af1a8f8f8ef2d",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Switch UC1122 B",
        "property": "$string(msg.payload.data)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "regex",
                "v": "EQ..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "Eg..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "A...",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "CQE.",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 360,
        "wires": [
            [
                "ee56cabe4dab56b4"
            ],
            [
                "80896d236ebfd317"
            ],
            [
                "90457defbb45dc5b"
            ],
            [
                "aa63fba0b8582ad1"
            ]
        ]
    },
    {
        "id": "cdafd79f90fb7dd8",
        "type": "debug",
        "z": "d018cc37328048f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 1030,
        "y": 80,
        "wires": []
    },
    {
        "id": "d2b8d06db3f29358",
        "type": "modbus-server",
        "z": "d018cc37328048f5",
        "name": "",
        "logEnabled": true,
        "hostname": "10.193.112.21",
        "serverPort": "502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": "10",
        "holdingBufferSize": "500",
        "inputBufferSize": "10",
        "discreteBufferSize": "10",
        "showErrors": true,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "cdafd79f90fb7dd8"
            ],
            [
                "cdafd79f90fb7dd8"
            ],
            [
                "cdafd79f90fb7dd8"
            ],
            [
                "cdafd79f90fb7dd8"
            ],
            [
                "cdafd79f90fb7dd8"
            ]
        ]
    },
    {
        "id": "49307a00ac734209",
        "type": "Stackhero-MySQL",
        "z": "d018cc37328048f5",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 570,
        "y": 200,
        "wires": [
            [
                "24c6e564c7b0ad0d",
                "b860b132d08fe7bd",
                "d874befe261baad7",
                "785f890b1ee2e153"
            ]
        ]
    },
    {
        "id": "96bc4609c49991cb",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Read Last Value",
        "func": "msg.topic = \"(SELECT valor FROM EEN054 WHERE fk='AI1' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 0\n\t        \"(SELECT valor FROM EEN054 WHERE fk='AI2' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 1\n\t        \"(SELECT valor FROM EEN054 WHERE fk='DI' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 2\n\t        \"(SELECT valor FROM EEN054 WHERE fk='DO' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 3\n\t        \"(SELECT rssi FROM EEN054 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                   //Index 4\n\t        \"(SELECT snr FROM EEN054 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                //Index 5\n\t        \"(SELECT timestamp FROM EEN054 ORDER BY Id DESC LIMIT 1) UNION ALL\"+            //Index 6\n\t        \"(SELECT valor FROM EEN038 WHERE fk='AI1' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 7\n\t        \"(SELECT valor FROM EEN038 WHERE fk='AI2' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 8\n\t        \"(SELECT valor FROM EEN038 WHERE fk='DI' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 9\n\t        \"(SELECT valor FROM EEN038 WHERE fk='DO' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 10\n\t        \"(SELECT rssi FROM EEN038 ORDER BY Id DESC LIMIT 1) UNION ALL\" +               //Index 11\n\t        \"(SELECT snr FROM EEN038 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                    //Index 12\n            \"(SELECT timestamp FROM EEN038 ORDER BY Id DESC LIMIT 1) UNION ALL\"+           //Index 13\n            \"(SELECT valor FROM EEN041 WHERE fk='AI1' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 14\n\t        \"(SELECT valor FROM EEN041 WHERE fk='AI2' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 15\n\t        \"(SELECT valor FROM EEN041 WHERE fk='DI' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 16\n\t        \"(SELECT valor FROM EEN041 WHERE fk='DO' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 17\n\t        \"(SELECT rssi FROM EEN041 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                   //Index 18\n\t        \"(SELECT snr FROM EEN041 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                 //Index 19\n            \"(SELECT timestamp FROM EEN041 ORDER BY Id DESC LIMIT 1) UNION ALL\"+           //Index 20\n            \"(SELECT valor FROM EEN048 WHERE fk='AI1' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 21\n\t        \"(SELECT valor FROM EEN048 WHERE fk='AI2' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 22\n\t        \"(SELECT valor FROM EEN048 WHERE fk='DI' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 23\n\t        \"(SELECT valor FROM EEN048 WHERE fk='DO' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 24\n\t        \"(SELECT rssi FROM EEN048 ORDER BY Id DESC LIMIT 1) UNION ALL\" +               //Index 25\n\t        \"(SELECT snr FROM EEN048 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                //Index 26\n            \"(SELECT timestamp FROM EEN048 ORDER BY Id DESC LIMIT 1) UNION ALL\"+           //Index 27\n            \"(SELECT valor FROM EEN047 WHERE fk='AI1' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 28\n\t        \"(SELECT valor FROM EEN047 WHERE fk='AI2' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 29\n\t        \"(SELECT valor FROM EEN047 WHERE fk='DI' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 30\n\t        \"(SELECT valor FROM EEN047 WHERE fk='DO' ORDER BY Id DESC LIMIT 1) UNION ALL\" + //Index 31\n\t        \"(SELECT rssi FROM EEN047 ORDER BY Id DESC LIMIT 1) UNION ALL\" +               //Index 32\n\t        \"(SELECT snr FROM EEN047 ORDER BY Id DESC LIMIT 1) UNION ALL\" +                //Index 33\n            \"(SELECT timestamp FROM EEN047 ORDER BY Id DESC LIMIT 1)\";           //Index 34\n\nmsg.payload = {};\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 200,
        "wires": [
            [
                "49307a00ac734209"
            ]
        ]
    },
    {
        "id": "01a67650786d0f1e",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Write Modbus Poll Interval",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "96bc4609c49991cb"
            ]
        ]
    },
    {
        "id": "d1f3c665106e801d",
        "type": "modbus-response",
        "z": "d018cc37328048f5",
        "name": "",
        "registerShowMax": 20,
        "x": 1230,
        "y": 200,
        "wires": []
    },
    {
        "id": "8a1197ed088e3b2d",
        "type": "modbus-flex-write",
        "z": "d018cc37328048f5",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "server": "f4cedeae.992bc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 1010,
        "y": 200,
        "wires": [
            [
                "d1f3c665106e801d"
            ],
            []
        ]
    },
    {
        "id": "68db17245a4dc1b5",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Activar Rele ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 760,
        "wires": [
            [
                "31ff8ae0c9c092eb"
            ]
        ]
    },
    {
        "id": "8b75eba6c671ee52",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Desactivar Rele",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"}",
        "payloadType": "str",
        "x": 1020,
        "y": 880,
        "wires": [
            [
                "31ff8ae0c9c092eb"
            ]
        ]
    },
    {
        "id": "a93b5470cbc1f101",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "58f8b468.a5402c",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "RSSI [dBm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-150",
        "ymax": "-30",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1810,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "26c1b649f68354f8",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "58f8b468.a5402c",
        "order": 2,
        "width": 12,
        "height": 6,
        "label": "SNR [dB]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-15",
        "ymax": "15",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1800,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "fa6aadd08ae24ae3",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "NODO A",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "55d6fe8b83638532",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "NODO B",
        "info": "",
        "x": 240,
        "y": 200,
        "wires": []
    },
    {
        "id": "a5328c44aa767fc1",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Pozo 54 - Nodo A",
        "info": "",
        "x": 840,
        "y": 40,
        "wires": []
    },
    {
        "id": "ab853baa2ec2fa57",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Pozo 38 - Nodo B",
        "info": "",
        "x": 840,
        "y": 280,
        "wires": []
    },
    {
        "id": "c2b881edc2a7c261",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "de74228a.9f29d",
        "order": 1,
        "width": 12,
        "height": 12,
        "label": "RSSI [dBm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-150",
        "ymax": "-30",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1810,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "48cd745beefebfee",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "de74228a.9f29d",
        "order": 2,
        "width": 12,
        "height": 12,
        "label": "SNR [dB]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-15",
        "ymax": "15",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c0d44b866d4f4a0d",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a1781dce.1af3a",
        "order": 1,
        "width": 12,
        "height": 6,
        "label": "AI 1 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "4f96d514b0a15091",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a1781dce.1af3a",
        "order": 2,
        "width": 12,
        "height": 6,
        "label": "AI 2 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "eb33636052e36de6",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "f07bded1.8c048",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "Estado DI",
        "label": "Estado DI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1300,
        "y": 120,
        "wires": []
    },
    {
        "id": "e6bb47158ca976f1",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "f07bded1.8c048",
        "order": 4,
        "width": 5,
        "height": 2,
        "name": "Estado DO",
        "label": "Estado DO",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1310,
        "y": 160,
        "wires": []
    },
    {
        "id": "91d7b24ba880fbe5",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "1e012668.f5b0aa",
        "order": 1,
        "width": 12,
        "height": 12,
        "label": "AI 1 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "60cb79057f5f6d95",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "1e012668.f5b0aa",
        "order": 2,
        "width": 12,
        "height": 12,
        "label": "AI 2 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "e2c05c9d08c2e158",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "75c324f2.5d4b2c",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "Estado DI",
        "label": "Estado DI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1300,
        "y": 380,
        "wires": []
    },
    {
        "id": "f8fa9633a9698023",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "75c324f2.5d4b2c",
        "order": 4,
        "width": 5,
        "height": 2,
        "name": "Estado DO",
        "label": "Estado DO",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1310,
        "y": 420,
        "wires": []
    },
    {
        "id": "54c92ba9da0f569b",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "NODO A",
        "info": "",
        "x": 580,
        "y": 780,
        "wires": []
    },
    {
        "id": "079dd80a6e2f3213",
        "type": "ui_gauge",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "6a53f40c.0fed5c",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperatura CPU",
        "label": "C",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 870,
        "y": 100,
        "wires": []
    },
    {
        "id": "130e80b9b2207b7e",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "command": "vcgencmd measure_temp",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "RPi Temp.",
        "x": 490,
        "y": 100,
        "wires": [
            [
                "5daacde26947394c"
            ],
            [],
            []
        ]
    },
    {
        "id": "52135a7512115ed2",
        "type": "inject",
        "z": "a59f2133521cf34f",
        "name": "Read Poll ",
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 284.5,
        "y": 108.25,
        "wires": [
            [
                "130e80b9b2207b7e",
                "e440f2bb948fea14",
                "ac833d391bc0a6ec"
            ]
        ]
    },
    {
        "id": "5daacde26947394c",
        "type": "function",
        "z": "a59f2133521cf34f",
        "name": "",
        "func": "str = msg.payload\nmsg.payload = str.substring(5,9);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 100,
        "wires": [
            [
                "079dd80a6e2f3213",
                "4e83b476b8d79cda"
            ]
        ]
    },
    {
        "id": "c2217e2cc0785715",
        "type": "ui_button",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "5f889de1.b0a8a4",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "Reboot",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 500,
        "y": 460,
        "wires": [
            [
                "2e6e17b27b70c671"
            ]
        ]
    },
    {
        "id": "2e6e17b27b70c671",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Reboot",
        "x": 740,
        "y": 460,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "400e315bd99ade7f",
        "type": "ui_button",
        "z": "a59f2133521cf34f",
        "d": true,
        "name": "",
        "group": "5f889de1.b0a8a4",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Shutdown",
        "tooltip": "",
        "color": "",
        "bgcolor": "red",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 500,
        "y": 520,
        "wires": [
            [
                "18eb8595aa30e037"
            ]
        ]
    },
    {
        "id": "18eb8595aa30e037",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "d": true,
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Shutdown",
        "x": 740,
        "y": 520,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "4e83b476b8d79cda",
        "type": "ui_chart",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "6a53f40c.0fed5c",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "HIstorial de Temperatura CPU",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "e440f2bb948fea14",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "command": "top -d 0.5 -b -n2 | grep \"Cpu(s)\"|tail -n 1 | awk '{print $2 + $4}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "CPU Load",
        "x": 490,
        "y": 200,
        "wires": [
            [
                "f30037634c02f1ff"
            ],
            [],
            []
        ]
    },
    {
        "id": "ac833d391bc0a6ec",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "command": "free | grep Mem | awk '{print 100*$3/$2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Free Memory",
        "x": 490,
        "y": 260,
        "wires": [
            [
                "7223c1f3b9a014f5"
            ],
            [],
            []
        ]
    },
    {
        "id": "f30037634c02f1ff",
        "type": "ui_gauge",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "6a53f40c.0fed5c",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Procesador",
        "label": "Uso de CPU",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 850,
        "y": 200,
        "wires": []
    },
    {
        "id": "7223c1f3b9a014f5",
        "type": "ui_gauge",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "619f1ca9.274054",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Memoria",
        "label": "Memoria en uso",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 820,
        "y": 260,
        "wires": []
    },
    {
        "id": "31e29c99f0ccf88b",
        "type": "exec",
        "z": "a59f2133521cf34f",
        "command": "df -h",
        "addpay": false,
        "append": "",
        "useSpawn": "",
        "timer": "",
        "name": "Disk Usage",
        "x": 490,
        "y": 340,
        "wires": [
            [
                "2736607203008e46"
            ],
            [],
            []
        ]
    },
    {
        "id": "4c36e29026e33d77",
        "type": "ui_gauge",
        "z": "a59f2133521cf34f",
        "name": "",
        "group": "119f5c5f.ffe4a4",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Disco",
        "label": "Uso de disco",
        "format": "{{value | number:1}}%",
        "min": 0,
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "x": 850,
        "y": 340,
        "wires": []
    },
    {
        "id": "2736607203008e46",
        "type": "function",
        "z": "a59f2133521cf34f",
        "name": "",
        "func": "var re = /([0-9]{2})%/\nvar idx = msg.payload.search(re);\nvar str = msg.payload;\nif (idx >=0) {\n    str = msg.payload.substring(idx, idx + 2);\n}\nmsg.payload = str;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 670,
        "y": 340,
        "wires": [
            [
                "4c36e29026e33d77"
            ]
        ]
    },
    {
        "id": "3fb0cee8137bb612",
        "type": "inject",
        "z": "a59f2133521cf34f",
        "name": "Read Poll ",
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 340,
        "wires": [
            [
                "31e29c99f0ccf88b"
            ]
        ]
    },
    {
        "id": "980be2a3f2452235",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Pozo 41 - Nodo C",
        "info": "",
        "x": 850,
        "y": 560,
        "wires": []
    },
    {
        "id": "343af20c84d3a302",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Switch UC1122 C",
        "property": "$string(msg.payload.data)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "regex",
                "v": "EQ..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "Eg..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "A...",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "CQE.",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 640,
        "wires": [
            [
                "b6230dd70c9d170b"
            ],
            [
                "2607d28e255b6c9f"
            ],
            [
                "3328bdc5b176cc34"
            ],
            [
                "7942d405a2a4097a"
            ]
        ]
    },
    {
        "id": "f83a843813e058c6",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "df73c7be.3f8818",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "RSSI [dBm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-150",
        "ymax": "-30",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1810,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "79ffcbc1f95862f4",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "df73c7be.3f8818",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "SNR [dB]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1800,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "af8c228dbaf2ff18",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "8bde4a95.cdb948",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "AI 1 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "8b9245d891193c54",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "8bde4a95.cdb948",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "AI 2 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f43002e8e8bc53f7",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "5f4e301.92c2dd",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "Estado DI",
        "label": "Estado DI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1300,
        "y": 660,
        "wires": []
    },
    {
        "id": "d4229de0938f164c",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "5f4e301.92c2dd",
        "order": 6,
        "width": 5,
        "height": 2,
        "name": "Estado DO",
        "label": "Estado DO",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1310,
        "y": 700,
        "wires": []
    },
    {
        "id": "5960398d795e7fb8",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "NODO C",
        "info": "",
        "x": 240,
        "y": 360,
        "wires": []
    },
    {
        "id": "9ad9c49a484d7607",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Pozo 48 - Nodo D",
        "info": "",
        "x": 850,
        "y": 820,
        "wires": []
    },
    {
        "id": "76080c490b333a0e",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Switch UC1122 D",
        "property": "$string(msg.payload.data)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "regex",
                "v": "EQ..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "Eg..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "A...",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "CQE.",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 900,
        "wires": [
            [
                "bcf96b483ce856ab"
            ],
            [
                "271af960f3d51dc7"
            ],
            [
                "2990920c36871386"
            ],
            [
                "1c123f807b0261f1"
            ]
        ]
    },
    {
        "id": "bf5fd819447ccc2d",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a2108fed.d840d",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "RSSI [dBm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-150",
        "ymax": "-30",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1810,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "10fc65d1c70296e8",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a2108fed.d840d",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "SNR [dB]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-15",
        "ymax": "15",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1800,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "908942639e1eddc1",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "4af1cec7.334d1",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "AI 1 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "e142f0c013b6b070",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "4af1cec7.334d1",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "AI 2 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "73b37b8ba61efe6f",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "aabdc5b5.69b6e8",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "Estado DI",
        "label": "Estado DI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1300,
        "y": 920,
        "wires": []
    },
    {
        "id": "8884aa0beae2e56e",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "aabdc5b5.69b6e8",
        "order": 6,
        "width": 5,
        "height": 2,
        "name": "Estado DO",
        "label": "Estado DO",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1310,
        "y": 960,
        "wires": []
    },
    {
        "id": "0a0d20735c92899c",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "NODO D",
        "info": "",
        "x": 240,
        "y": 540,
        "wires": []
    },
    {
        "id": "86e8135f9f12c67d",
        "type": "switch",
        "z": "d2eb47fc2fa390b1",
        "name": "Switch UC1122 E",
        "property": "$string(msg.payload.data)",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "regex",
                "v": "EQ..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "Eg..............",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "A...",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "CQE.",
                "vt": "str",
                "case": false
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 850,
        "y": 1140,
        "wires": [
            [
                "bb750d7d51ea0fdb"
            ],
            [
                "f5ec76172c14c252"
            ],
            [
                "118e96fa4d058c80"
            ],
            [
                "ccc85f7cd16e0fe5"
            ]
        ]
    },
    {
        "id": "c28ba4a0b2a119a1",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "6594a91b.85a3f8",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "RSSI [dBm]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-150",
        "ymax": "-30",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1810,
        "y": 1180,
        "wires": [
            []
        ]
    },
    {
        "id": "5b84c86a534f5055",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "6594a91b.85a3f8",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "SNR [dB]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "-15",
        "ymax": "15",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1800,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "a5ca878390027f6b",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "fd517ba4.6ac628",
        "order": 1,
        "width": 12,
        "height": 13,
        "label": "AI 1 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "0e8e198b87070fb0",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "fd517ba4.6ac628",
        "order": 2,
        "width": 12,
        "height": 13,
        "label": "AI 2 [mA]",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1300,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "8371d9e3848d6e11",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "c55326d4.6f5ca8",
        "order": 2,
        "width": 5,
        "height": 2,
        "name": "Estado DI",
        "label": "Estado DI",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1300,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e25d0eb676256ca5",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "c55326d4.6f5ca8",
        "order": 6,
        "width": 5,
        "height": 2,
        "name": "Estado DO",
        "label": "Estado DO",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "x": 1310,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5b2cfde58b842ffa",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Pozo 47 - Nodo E",
        "info": "",
        "x": 840,
        "y": 1060,
        "wires": []
    },
    {
        "id": "e4e1a013e3759218",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "NODO E",
        "info": "",
        "x": 240,
        "y": 700,
        "wires": []
    },
    {
        "id": "922c50a96c2d20b6",
        "type": "mqtt out",
        "z": "d018cc37328048f5",
        "name": "Activar/Desactivar Relé UC1122C",
        "topic": "application/1/device/24e124121a304610/tx",
        "qos": "1",
        "retain": "",
        "broker": "1f5ebf89.410ca",
        "x": 1300,
        "y": 1260,
        "wires": []
    },
    {
        "id": "48000c982f1b331c",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "NODO C",
        "info": "",
        "x": 580,
        "y": 1220,
        "wires": []
    },
    {
        "id": "fc54b69b1168a5d4",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "NODO D",
        "info": "",
        "x": 580,
        "y": 1440,
        "wires": []
    },
    {
        "id": "def03f0a1a709ad0",
        "type": "mqtt out",
        "z": "d018cc37328048f5",
        "name": "Activar/Desactivar Relé UC1122E",
        "topic": "application/1/device/24e1612195211747/tx",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1f5ebf89.410ca",
        "x": 1300,
        "y": 1700,
        "wires": []
    },
    {
        "id": "93ca99eeac4cd3bd",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "NODO E",
        "info": "",
        "x": 580,
        "y": 1660,
        "wires": []
    },
    {
        "id": "ea3008a4cfe6eca8",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Delete Old Values",
        "func": "var d = new Date();\n\nvar mes = d.getMonth() + 1 ;\nvar m=0;\n\n\nif (mes > 2){\n    m = mes-2;\n    \n} else if (mes == 1){\n    m = 11;\n} else if (mes == 2){\n    m = 12;\n}\n\nmsg.payload = {m: m};\n\nmsg.topic = \"(DELETE FROM UC1122A WHERE mes = \"+ m +\");\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 80,
        "wires": [
            [
                "4ee9f19bbb1c8999"
            ]
        ]
    },
    {
        "id": "4ee9f19bbb1c8999",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 1350,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "28652d24c502d74d",
        "type": "inject",
        "z": "89ac413fc4a2dfe4",
        "name": "Poll Para Borrar Datos DB",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * 1",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 900,
        "y": 80,
        "wires": [
            [
                "ea3008a4cfe6eca8"
            ]
        ]
    },
    {
        "id": "0883582b4b756cad",
        "type": "comment",
        "z": "89ac413fc4a2dfe4",
        "name": "Poll Todos los Lunes a las 12:00",
        "info": "",
        "x": 900,
        "y": 40,
        "wires": []
    },
    {
        "id": "95c3d52052c9fd63",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "Poll de lectura 2 Segundos",
        "info": "",
        "x": 150,
        "y": 740,
        "wires": []
    },
    {
        "id": "015b8304169d8e5a",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "Poll de Escritura 5 Minutos",
        "info": "",
        "x": 150,
        "y": 140,
        "wires": []
    },
    {
        "id": "15a51143131a0717",
        "type": "comment",
        "z": "a59f2133521cf34f",
        "name": "Poll de Lectura 1 Minuto",
        "info": "",
        "x": 290,
        "y": 380,
        "wires": []
    },
    {
        "id": "9566582d6eb68883",
        "type": "comment",
        "z": "a59f2133521cf34f",
        "name": "Poll de Lectura 10 Segundos",
        "info": "",
        "x": 300,
        "y": 60,
        "wires": []
    },
    {
        "id": "4dc07c98b3782cf7",
        "type": "mqtt out",
        "z": "d018cc37328048f5",
        "name": "Activar/Desactivar Relé UC1122B",
        "topic": "application/1/device/24e124121a308169/tx",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1f5ebf89.410ca",
        "x": 1300,
        "y": 1040,
        "wires": []
    },
    {
        "id": "3cd1918ed99a2a2f",
        "type": "comment",
        "z": "d018cc37328048f5",
        "name": "NODO B",
        "info": "",
        "x": 580,
        "y": 1000,
        "wires": []
    },
    {
        "id": "3abcbf2ea0b1a41a",
        "type": "mqtt out",
        "z": "d018cc37328048f5",
        "name": "Activar/Desactivar Relé UC1122D",
        "topic": "application/1/device/24e124121a303488/tx",
        "qos": "1",
        "retain": "",
        "broker": "1f5ebf89.410ca",
        "x": 1300,
        "y": 1480,
        "wires": []
    },
    {
        "id": "364a6d79d8ceb709",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Comando DO",
        "func": "var comando = msg.payload[0];\n\n// Entra si recibe estado de DO y chequea que coincida con el ultimo comando\n// Si no coincide, manda comando para activar o desactivar segun corresponda\nif (msg.topic === \"DO\" && context.DOA != undefined) {\n    if (context.comando != msg.payload.valor) { \n        if (context.DOA == 1) { \n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n            return msg;}\n        else if (context.DOA === 0){\n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n            return msg;}\n    }\n    else return null;\n}\n\n// Guardo el comando para tener registro del ultimo valor requerido\ncontext.DOA = comando;\n\nvar debug = {comando: comando, aux: context.comando};\nnode.warn(debug);\n\n// Manda comando por MQTT\n\nif (comando == 1) { \n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n    return msg;}\n   \nelse if (comando === 0){\n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n    return msg;}\n    \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 820,
        "wires": [
            [
                "31ff8ae0c9c092eb",
                "3212aa4df9909d58"
            ]
        ]
    },
    {
        "id": "31ff8ae0c9c092eb",
        "type": "mqtt out",
        "z": "d018cc37328048f5",
        "name": "Activar / Desactivar Relé UC1122A",
        "topic": "application/1/device/24e124121a305748/tx",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1f5ebf89.410ca",
        "x": 1300,
        "y": 820,
        "wires": []
    },
    {
        "id": "f07c948056768274",
        "type": "rbe",
        "z": "d018cc37328048f5",
        "name": "Cambio de estado",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 820,
        "wires": [
            [
                "364a6d79d8ceb709"
            ]
        ]
    },
    {
        "id": "92b924392f7be3d3",
        "type": "link in",
        "z": "d018cc37328048f5",
        "name": "UC1122 A - Retorno DO",
        "links": [
            "c20003ba.0973c"
        ],
        "x": 800,
        "y": 760,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "dece9b1d28238996",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Activar Rele ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 980,
        "wires": [
            [
                "4dc07c98b3782cf7"
            ]
        ]
    },
    {
        "id": "ed7fb8aa77915a83",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Desactivar Rele",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"}",
        "payloadType": "str",
        "x": 1020,
        "y": 1100,
        "wires": [
            [
                "4dc07c98b3782cf7"
            ]
        ]
    },
    {
        "id": "9e19c3878d4fee71",
        "type": "rbe",
        "z": "d018cc37328048f5",
        "name": "Cambio de estado",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 1040,
        "wires": [
            [
                "f7cc977aa24e0a0b"
            ]
        ]
    },
    {
        "id": "98c3ad49c29baee7",
        "type": "link in",
        "z": "d018cc37328048f5",
        "name": "UC1122 B - Retorno DO",
        "links": [
            "73e02e9a.388a9"
        ],
        "x": 790,
        "y": 980,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "06df77879038bd9e",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Activar Rele ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 1200,
        "wires": [
            [
                "922c50a96c2d20b6"
            ]
        ]
    },
    {
        "id": "6bcb21af2af78ed3",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Desactivar Rele",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"}",
        "payloadType": "str",
        "x": 1020,
        "y": 1320,
        "wires": [
            [
                "922c50a96c2d20b6"
            ]
        ]
    },
    {
        "id": "01ba08183e89547e",
        "type": "rbe",
        "z": "d018cc37328048f5",
        "name": "Cambio de estado",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 1260,
        "wires": [
            [
                "dac213b110b9bc38"
            ]
        ]
    },
    {
        "id": "d78206aad667215b",
        "type": "link in",
        "z": "d018cc37328048f5",
        "name": "UC1122 C - Retorno DO",
        "links": [
            "a7dbc7c7.58cd38"
        ],
        "x": 790,
        "y": 1200,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "ad7943fb19f022f2",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Activar Rele ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 1420,
        "wires": [
            [
                "3abcbf2ea0b1a41a"
            ]
        ]
    },
    {
        "id": "e6b9da2770950142",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Desactivar Rele",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"}",
        "payloadType": "str",
        "x": 1020,
        "y": 1540,
        "wires": [
            [
                "3abcbf2ea0b1a41a"
            ]
        ]
    },
    {
        "id": "e5d16defa0a53da2",
        "type": "rbe",
        "z": "d018cc37328048f5",
        "name": "Cambio de estado",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 1480,
        "wires": [
            [
                "17cb8febb0cb91d1"
            ]
        ]
    },
    {
        "id": "c1281d24dceeba8c",
        "type": "link in",
        "z": "d018cc37328048f5",
        "name": "UC1122 D - Retorno DO",
        "links": [
            "a6108a5b.b90ee8"
        ],
        "x": 790,
        "y": 1420,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "5bdea928945f6751",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Activar Rele ",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"}",
        "payloadType": "str",
        "x": 1030,
        "y": 1640,
        "wires": [
            [
                "def03f0a1a709ad0"
            ]
        ]
    },
    {
        "id": "18abd749a11e2324",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Desactivar Rele",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"}",
        "payloadType": "str",
        "x": 1020,
        "y": 1760,
        "wires": [
            [
                "def03f0a1a709ad0"
            ]
        ]
    },
    {
        "id": "85d30c2afbb0b0ca",
        "type": "rbe",
        "z": "d018cc37328048f5",
        "name": "Cambio de estado",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "payload",
        "topi": "topic",
        "x": 810,
        "y": 1700,
        "wires": [
            [
                "d65864bf8ff500ca"
            ]
        ]
    },
    {
        "id": "df4b6be7a63d147c",
        "type": "link in",
        "z": "d018cc37328048f5",
        "name": "UC1122 E - Retorno DO",
        "links": [
            "2be06a1d.143aa6"
        ],
        "x": 790,
        "y": 1640,
        "wires": [
            []
        ],
        "l": true
    },
    {
        "id": "085a0b4590de2639",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "A37-AI1",
        "group": "a1781dce.1af3a",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "A37-AI1",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "65937e9b7c242699",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "A37-AI2",
        "group": "a1781dce.1af3a",
        "order": 4,
        "width": 12,
        "height": 6,
        "label": "A37-AI2",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "24e98713fe187d72",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "B35-AI1",
        "group": "1e012668.f5b0aa",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "B35-AI1",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "4a7a8a07626614fd",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "B35-AI2",
        "group": "1e012668.f5b0aa",
        "order": 4,
        "width": 12,
        "height": 6,
        "label": "B35-AI2",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "f81ca694fdcdf040",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "C44-AI1",
        "group": "8bde4a95.cdb948",
        "order": 3,
        "width": 12,
        "height": "6",
        "label": "C44-AI1",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "99649fa64e9845e7",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "C44-AI2",
        "group": "8bde4a95.cdb948",
        "order": 4,
        "width": 12,
        "height": "6",
        "label": "C44-AI2",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "95a2f769e2146b29",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "D45-AI1",
        "group": "4af1cec7.334d1",
        "order": 3,
        "width": 12,
        "height": 6,
        "label": "D45-AI1",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "f62240c3c5ddcd34",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "D45-AI2",
        "group": "4af1cec7.334d1",
        "order": 4,
        "width": 12,
        "height": 6,
        "label": "D45-AI2",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "3b931bdae08f0cac",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "E33-AI1",
        "group": "fd517ba4.6ac628",
        "order": 3,
        "width": 12,
        "height": "6",
        "label": "E33-AI1",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "bd58b20536228ac1",
        "type": "ui_chart",
        "z": "d018cc37328048f5",
        "name": "E33-AI2",
        "group": "fd517ba4.6ac628",
        "order": 4,
        "width": 12,
        "height": "6",
        "label": "E33-AI2",
        "chartType": "line",
        "legend": "false",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1120,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "24c6e564c7b0ad0d",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Armar vector de analógicas",
        "func": "msg.topic =\"Tabla Modbus\";\n\nif(msg.payload[0] === undefined)\n    return null;\n\n\n//Preparando mensajes\nvar msg_NodoA_1 = { payload: parseFloat(msg.payload[0].valor), topic: \"AI1\", timestamp: parseInt(msg.payload[6].valor) * 1000};\nvar msg_NodoA_2 = { payload: parseFloat(msg.payload[1].valor), topic: \"AI2\", timestamp: parseInt(msg.payload[6].valor) * 1000};\nvar msg_NodoB_1 = { payload: parseFloat(msg.payload[7].valor), topic: \"AI1\", timestamp: parseInt(msg.payload[13].valor) * 1000};\nvar msg_NodoB_2 = { payload: parseFloat(msg.payload[8].valor), topic: \"AI2\", timestamp: parseInt(msg.payload[13].valor) * 1000};\nvar msg_NodoC_1 = { payload: parseFloat(msg.payload[14].valor), topic: \"AI1\", timestamp: parseInt(msg.payload[20].valor) * 1000};\nvar msg_NodoC_2 = { payload: parseFloat(msg.payload[15].valor), topic: \"AI2\", timestamp: parseInt(msg.payload[20].valor) * 1000};\nvar msg_NodoD_1 = { payload: parseFloat(msg.payload[21].valor), topic: \"AI1\", timestamp: parseInt(msg.payload[27].valor) * 1000};\nvar msg_NodoD_2 = { payload: parseFloat(msg.payload[22].valor), topic: \"AI2\", timestamp: parseInt(msg.payload[27].valor) * 1000};\nvar msg_NodoE_1 = { payload: parseFloat(msg.payload[28].valor), topic: \"AI1\", timestamp: parseInt(msg.payload[34].valor) * 1000};\nvar msg_NodoE_2 = { payload: parseFloat(msg.payload[29].valor), topic: \"AI2\", timestamp: parseInt(msg.payload[34].valor) * 1000};\n\nreturn [msg_NodoA_1, msg_NodoA_2, msg_NodoB_1, msg_NodoB_2, msg_NodoC_1, \n\nmsg_NodoC_2, msg_NodoD_1, msg_NodoD_2, msg_NodoE_1, msg_NodoE_2];",
        "outputs": 10,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 420,
        "wires": [
            [
                "085a0b4590de2639"
            ],
            [
                "65937e9b7c242699"
            ],
            [
                "24e98713fe187d72"
            ],
            [
                "4a7a8a07626614fd"
            ],
            [
                "f81ca694fdcdf040"
            ],
            [
                "99649fa64e9845e7"
            ],
            [
                "95a2f769e2146b29"
            ],
            [
                "f62240c3c5ddcd34"
            ],
            [
                "3b931bdae08f0cac"
            ],
            [
                "bd58b20536228ac1"
            ]
        ]
    },
    {
        "id": "8b8ca3a2f0efa831",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 870,
        "y": 620,
        "wires": [
            [
                "bd58b20536228ac1",
                "3b931bdae08f0cac",
                "f62240c3c5ddcd34",
                "95a2f769e2146b29",
                "99649fa64e9845e7",
                "f81ca694fdcdf040",
                "4a7a8a07626614fd",
                "24e98713fe187d72",
                "65937e9b7c242699",
                "085a0b4590de2639"
            ]
        ]
    },
    {
        "id": "e2eaacb2bb6ede61",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Filtro bit",
        "func": "word = msg.payload[0];\n\nA = ((word & 0x1) === 0) ? 0 : 1;\nB = ((word & 0x2) === 0) ? 0 : 1;\nC = ((word & 0x4) === 0) ? 0 : 1;\nD = ((word & 0x8) === 0) ? 0 : 1;\nE = ((word & 0x10) === 0) ? 0 : 1;\n\nmsg_A = {payload: A};\nmsg_B = {payload: B};\nmsg_C = {payload: C};\nmsg_D = {payload: D};\nmsg_E = {payload: E};\n\ndebug = {\n    'word': word,\n    'bit 0': A,\n    'bit 1': B,\n    'bit 2': C,\n    'bit 3': D,\n    'bit 4': E\n    }\n\n//node.warn(debug);\n\nreturn [msg_A, msg_B, msg_C, msg_D, msg_E];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 880,
        "wires": [
            [
                "f07c948056768274"
            ],
            [
                "9e19c3878d4fee71"
            ],
            [
                "01ba08183e89547e"
            ],
            [
                "e5d16defa0a53da2"
            ],
            [
                "85d30c2afbb0b0ca"
            ]
        ]
    },
    {
        "id": "1f2b1acefc54eb2b",
        "type": "modbus-getter",
        "z": "d018cc37328048f5",
        "name": "Registro 100",
        "showStatusActivities": false,
        "showErrors": true,
        "logIOActivities": false,
        "unitid": "1",
        "dataType": "HoldingRegister",
        "adr": "100",
        "quantity": "1",
        "server": "f4cedeae.992bc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 370,
        "y": 880,
        "wires": [
            [
                "e2eaacb2bb6ede61"
            ],
            []
        ]
    },
    {
        "id": "c67f9a71918fdcf7",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "Read Modbus Poll Interval",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 140,
        "y": 880,
        "wires": [
            [
                "1f2b1acefc54eb2b"
            ]
        ]
    },
    {
        "id": "405498959c336ce5",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI1",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI1_min = valores_escalado.AI1_min;\nAI1_max = valores_escalado.AI1_max;\n\n//Escalo la señal\nescalado = (AI1_max - AI1_min) * (float - 4) / 16 + AI1_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI1\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 40,
        "wires": [
            [
                "c0d44b866d4f4a0d",
                "5e6a219217deed3c"
            ]
        ]
    },
    {
        "id": "b837bec07374d92f",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI2",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI2_min = valores_escalado.AI2_min;\nAI2_max = valores_escalado.AI2_max;\n\n//Escalo la señal\nescalado = (AI2_max - AI2_min) * (float - 4) / 16 + AI2_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI2\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 80,
        "wires": [
            [
                "4f96d514b0a15091",
                "5e6a219217deed3c"
            ]
        ]
    },
    {
        "id": "132b32278c616ddd",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DI",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DI\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 120,
        "wires": [
            [
                "eb33636052e36de6",
                "5e6a219217deed3c"
            ]
        ]
    },
    {
        "id": "e5c3d67a8c659261",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DO",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DO\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 160,
        "wires": [
            [
                "e6bb47158ca976f1",
                "5e6a219217deed3c"
            ]
        ]
    },
    {
        "id": "99af429790d39acf",
        "type": "interval-length",
        "z": "d2eb47fc2fa390b1",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": false,
        "startup": false,
        "msgField": "payload",
        "timestampField": "time",
        "repeatTimeout": false,
        "name": "Inervalos",
        "x": 1540,
        "y": 80,
        "wires": [
            [
                "3da76929a28aecbe"
            ],
            []
        ]
    },
    {
        "id": "565807385651b915",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract RSSI y SNR",
        "func": "//Extraigo timestamp del mensaje\ntime = msg.timestamp;\n\n//Tomo el valor de rssi\nrssi = msg.rssi;\n\n//Tomo el valor de snr\nsnr = msg.snr;\n\n//Armo estructura con valor de AI y timestamp\nvar msg_rssi = {payload: rssi, topic: \"RSSI\", timestamp: time};\n\n//Armo estructura con valor de AI y timestamp\nvar msg_snr = {payload: snr, topic:\"SNR\", timestamp: time};\n\nreturn [msg_rssi, msg_snr];",
        "outputs": 2,
        "noerr": 0,
        "x": 1580,
        "y": 160,
        "wires": [
            [
                "a93b5470cbc1f101"
            ],
            [
                "26c1b649f68354f8"
            ]
        ]
    },
    {
        "id": "730c5c8c8aae3a85",
        "type": "link in",
        "z": "d2eb47fc2fa390b1",
        "name": "Calidad A",
        "links": [
            "5e6a219217deed3c"
        ],
        "x": 1415,
        "y": 120,
        "wires": [
            [
                "565807385651b915",
                "99af429790d39acf"
            ]
        ]
    },
    {
        "id": "3da76929a28aecbe",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "A minutos",
        "func": "//guardo los milisegundos de entrada\nms = msg.payload;\n\n//paso a minutos\nmin = ms / 1000 / 60;\n\n//armo mensaje\nmsg.payload = min.toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 80,
        "wires": [
            [
                "b52b6a7526195454"
            ]
        ]
    },
    {
        "id": "44dc181e9a9da0e8",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1710,
        "y": 40,
        "wires": [
            [
                "b52b6a7526195454"
            ]
        ]
    },
    {
        "id": "b52b6a7526195454",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a3bfce3.428233",
        "order": 1,
        "width": 24,
        "height": 6,
        "label": "Intervalos",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#39aa31",
            "#ff330f",
            "#b159d9",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1860,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ee56cabe4dab56b4",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI1",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI1_min = valores_escalado.AI1_min;\nAI1_max = valores_escalado.AI1_max;\n\n//Escalo la señal\nescalado = (AI1_max - AI1_min) * (float - 4) / 16 + AI1_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI1\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 300,
        "wires": [
            [
                "91d7b24ba880fbe5",
                "3b655ea46c49b452",
                "0c90ca4af982fc76"
            ]
        ]
    },
    {
        "id": "80896d236ebfd317",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI2",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI2_min = valores_escalado.AI2_min;\nAI2_max = valores_escalado.AI2_max;\n\n//Escalo la señal\nescalado = (AI2_max - AI2_min) * (float - 4) / 16 + AI2_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI2\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "60cb79057f5f6d95",
                "3b655ea46c49b452",
                "0c90ca4af982fc76"
            ]
        ]
    },
    {
        "id": "90457defbb45dc5b",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DI",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DI\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 380,
        "wires": [
            [
                "e2c05c9d08c2e158",
                "3b655ea46c49b452"
            ]
        ]
    },
    {
        "id": "aa63fba0b8582ad1",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DO",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DO\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 420,
        "wires": [
            [
                "f8fa9633a9698023",
                "3b655ea46c49b452"
            ]
        ]
    },
    {
        "id": "7da1997b64d0f3e2",
        "type": "interval-length",
        "z": "d2eb47fc2fa390b1",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": false,
        "startup": false,
        "msgField": "payload",
        "timestampField": "time",
        "repeatTimeout": false,
        "name": "Inervalos",
        "x": 1540,
        "y": 340,
        "wires": [
            [
                "7c5f8207dbbe6d50"
            ],
            []
        ]
    },
    {
        "id": "32fa7def1e38f26f",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract RSSI y SNR",
        "func": "//Extraigo timestamp del mensaje\ntime = msg.timestamp;\n\n//Tomo el valor de rssi\nrssi = msg.rssi;\n\n//Tomo el valor de snr\nsnr = msg.snr;\n\n//Armo estructura con valor de AI y timestamp\nvar msg_rssi = {payload: rssi, topic: \"RSSI\", timestamp: time};\n\n//Armo estructura con valor de AI y timestamp\nvar msg_snr = {payload: snr, topic:\"SNR\", timestamp: time};\n\nreturn [msg_rssi, msg_snr];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 420,
        "wires": [
            [
                "c2b881edc2a7c261"
            ],
            [
                "48cd745beefebfee"
            ]
        ]
    },
    {
        "id": "9efdea20dfb92447",
        "type": "link in",
        "z": "d2eb47fc2fa390b1",
        "name": "Calidad B",
        "links": [
            "3b655ea46c49b452"
        ],
        "x": 1415,
        "y": 380,
        "wires": [
            [
                "32fa7def1e38f26f",
                "7da1997b64d0f3e2"
            ]
        ]
    },
    {
        "id": "7c5f8207dbbe6d50",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "A minutos",
        "func": "//guardo los milisegundos de entrada\nms = msg.payload;\n\n//paso a minutos\nmin = ms / 1000 / 60;\n\n//armo mensaje\nmsg.payload = min.toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 340,
        "wires": [
            [
                "d2df62c6472c6d3a"
            ]
        ]
    },
    {
        "id": "b76b23649d1e7c08",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1710,
        "y": 300,
        "wires": [
            [
                "d2df62c6472c6d3a"
            ]
        ]
    },
    {
        "id": "d2df62c6472c6d3a",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "2f44b6a0.cc2b6a",
        "order": 1,
        "width": 24,
        "height": 6,
        "label": "Intervalos",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#39aa31",
            "#ff330f",
            "#b159d9",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1860,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "b6230dd70c9d170b",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI1",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI1_min = valores_escalado.AI1_min;\nAI1_max = valores_escalado.AI1_max;\n\n//Escalo la señal\nescalado = (AI1_max - AI1_min) * (float - 4) / 16 + AI1_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI1\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 580,
        "wires": [
            [
                "af8c228dbaf2ff18",
                "f8e3749e4ea9eb27"
            ]
        ]
    },
    {
        "id": "2607d28e255b6c9f",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI2",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI2_min = valores_escalado.AI2_min;\nAI2_max = valores_escalado.AI2_max;\n\n//Escalo la señal\nescalado = (AI2_max - AI2_min) * (float - 4) / 16 + AI2_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI2\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 620,
        "wires": [
            [
                "8b9245d891193c54",
                "f8e3749e4ea9eb27"
            ]
        ]
    },
    {
        "id": "3328bdc5b176cc34",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DI",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DI\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 660,
        "wires": [
            [
                "f43002e8e8bc53f7",
                "f8e3749e4ea9eb27"
            ]
        ]
    },
    {
        "id": "7942d405a2a4097a",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DO",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DO\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 700,
        "wires": [
            [
                "d4229de0938f164c",
                "f8e3749e4ea9eb27"
            ]
        ]
    },
    {
        "id": "6f6e21dbaab5d8cb",
        "type": "interval-length",
        "z": "d2eb47fc2fa390b1",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": false,
        "startup": false,
        "msgField": "payload",
        "timestampField": "time",
        "repeatTimeout": false,
        "name": "Inervalos",
        "x": 1540,
        "y": 620,
        "wires": [
            [
                "e5ae4d42a7bac321"
            ],
            []
        ]
    },
    {
        "id": "f77c369b87989f30",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract RSSI y SNR",
        "func": "//Extraigo timestamp del mensaje\ntime = msg.timestamp;\n\n//Tomo el valor de rssi\nrssi = msg.rssi;\n\n//Tomo el valor de snr\nsnr = msg.snr;\n\n//Armo estructura con valor de AI y timestamp\nvar msg_rssi = {payload: rssi, topic: \"RSSI\", timestamp: time};\n\n//Armo estructura con valor de AI y timestamp\nvar msg_snr = {payload: snr, topic:\"SNR\", timestamp: time};\n\nreturn [msg_rssi, msg_snr];",
        "outputs": 2,
        "noerr": 0,
        "x": 1580,
        "y": 700,
        "wires": [
            [
                "f83a843813e058c6"
            ],
            [
                "79ffcbc1f95862f4"
            ]
        ]
    },
    {
        "id": "c957f1452947276a",
        "type": "link in",
        "z": "d2eb47fc2fa390b1",
        "name": "Calidad C",
        "links": [
            "f8e3749e4ea9eb27"
        ],
        "x": 1415,
        "y": 660,
        "wires": [
            [
                "f77c369b87989f30",
                "6f6e21dbaab5d8cb"
            ]
        ]
    },
    {
        "id": "e5ae4d42a7bac321",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "A minutos",
        "func": "//guardo los milisegundos de entrada\nms = msg.payload;\n\n//paso a minutos\nmin = ms / 1000 / 60;\n\n//armo mensaje\nmsg.payload = min.toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 620,
        "wires": [
            [
                "9e4a4cbdc5b92419"
            ]
        ]
    },
    {
        "id": "7f97002d6c9938ec",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1710,
        "y": 580,
        "wires": [
            [
                "9e4a4cbdc5b92419"
            ]
        ]
    },
    {
        "id": "9e4a4cbdc5b92419",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "947c5b62.718af8",
        "order": 1,
        "width": 24,
        "height": 6,
        "label": "Intervalos",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#39aa31",
            "#ff330f",
            "#b159d9",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1860,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "bcf96b483ce856ab",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI1",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI1_min = valores_escalado.AI1_min;\nAI1_max = valores_escalado.AI1_max;\n\n//Escalo la señal\nescalado = (AI1_max - AI1_min) * (float - 4) / 16 + AI1_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI1\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 840,
        "wires": [
            [
                "908942639e1eddc1",
                "2541609aa170a733"
            ]
        ]
    },
    {
        "id": "271af960f3d51dc7",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI2",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI2_min = valores_escalado.AI2_min;\nAI2_max = valores_escalado.AI2_max;\n\n//Escalo la señal\nescalado = (AI2_max - AI2_min) * (float - 4) / 16 + AI2_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI2\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "e142f0c013b6b070",
                "2541609aa170a733"
            ]
        ]
    },
    {
        "id": "2990920c36871386",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DI",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DI\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 920,
        "wires": [
            [
                "73b37b8ba61efe6f",
                "2541609aa170a733"
            ]
        ]
    },
    {
        "id": "1c123f807b0261f1",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DO",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DO\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 960,
        "wires": [
            [
                "8884aa0beae2e56e",
                "2541609aa170a733"
            ]
        ]
    },
    {
        "id": "946548498f4bd7f5",
        "type": "interval-length",
        "z": "d2eb47fc2fa390b1",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": false,
        "startup": false,
        "msgField": "payload",
        "timestampField": "time",
        "repeatTimeout": false,
        "name": "Inervalos",
        "x": 1540,
        "y": 880,
        "wires": [
            [
                "97ce2f6d96febe4c"
            ],
            []
        ]
    },
    {
        "id": "9ea72b34ddae3078",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract RSSI y SNR",
        "func": "//Extraigo timestamp del mensaje\ntime = msg.timestamp;\n\n//Tomo el valor de rssi\nrssi = msg.rssi;\n\n//Tomo el valor de snr\nsnr = msg.snr;\n\n//Armo estructura con valor de AI y timestamp\nvar msg_rssi = {payload: rssi, topic: \"RSSI\", timestamp: time};\n\n//Armo estructura con valor de AI y timestamp\nvar msg_snr = {payload: snr, topic:\"SNR\", timestamp: time};\n\nreturn [msg_rssi, msg_snr];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 960,
        "wires": [
            [
                "bf5fd819447ccc2d"
            ],
            [
                "10fc65d1c70296e8"
            ]
        ]
    },
    {
        "id": "86b39752d1cd22fe",
        "type": "link in",
        "z": "d2eb47fc2fa390b1",
        "name": "Calidad D",
        "links": [
            "2541609aa170a733"
        ],
        "x": 1415,
        "y": 920,
        "wires": [
            [
                "9ea72b34ddae3078",
                "946548498f4bd7f5"
            ]
        ]
    },
    {
        "id": "97ce2f6d96febe4c",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "A minutos",
        "func": "//guardo los milisegundos de entrada\nms = msg.payload;\n\n//paso a minutos\nmin = ms / 1000 / 60;\n\n//armo mensaje\nmsg.payload = min.toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 880,
        "wires": [
            [
                "e098ae4f98630372"
            ]
        ]
    },
    {
        "id": "675c671cb2632401",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1710,
        "y": 840,
        "wires": [
            [
                "e098ae4f98630372"
            ]
        ]
    },
    {
        "id": "e098ae4f98630372",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "66b651bb.b70da",
        "order": 1,
        "width": 24,
        "height": 6,
        "label": "Intervalos",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#39aa31",
            "#ff330f",
            "#b159d9",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1860,
        "y": 880,
        "wires": [
            []
        ]
    },
    {
        "id": "bb750d7d51ea0fdb",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI1",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI1_min = valores_escalado.AI1_min;\nAI1_max = valores_escalado.AI1_max;\n\n//Escalo la señal\nescalado = (AI1_max - AI1_min) * (float - 4) / 16 + AI1_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI1\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1080,
        "wires": [
            [
                "a5ca878390027f6b",
                "ab5a0f7d0803019f"
            ]
        ]
    },
    {
        "id": "f5ec76172c14c252",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract AI2",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//Paso el hexa a string\nhexs1 = bufHex[4].toString(16); \nhexs2 = bufHex[5].toString(16);\nhexs3 = bufHex[6].toString(16);\nhexs4 = bufHex[7].toString(16);\n\n//Invierto para que se muestre correctamente\nhex = \"0x\" + hexs3 + hexs4 + hexs1 + hexs2;\n\n//Parseo a entero el string hexadecimal\nentero = parseInt(hex, 16);\n\n//Corro la coma para que se muestre como float\nfloat = entero / 100;\n\n//Cargo valores de escalado \nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else valores_escalado = val;\n});\n\nAI2_min = valores_escalado.AI2_min;\nAI2_max = valores_escalado.AI2_max;\n\n//Escalo la señal\nescalado = (AI2_max - AI2_min) * (float - 4) / 16 + AI2_min;\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de AI y timestamp\nvar newMsg = {payload: parseFloat(escalado).toFixed(2), topic: \"AI2\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1120,
        "wires": [
            [
                "0e8e198b87070fb0",
                "ab5a0f7d0803019f"
            ]
        ]
    },
    {
        "id": "118e96fa4d058c80",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DI",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DI\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1160,
        "wires": [
            [
                "8371d9e3848d6e11",
                "ab5a0f7d0803019f"
            ]
        ]
    },
    {
        "id": "ccc85f7cd16e0fe5",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract DO",
        "func": "//Convierto el data de Base64 a Hexa\nvar bufHex = Buffer.from(msg.payload.data, 'base64').toString('hex');\n\n//Guardo variables de calidad\nrssi = msg.payload.rxInfo[0].rssi;\nsnr = msg.payload.rxInfo[0].loRaSNR;\n\n\n//paso el hexa a string\nstring = bufHex[5].toString(16); \n\nif (string == \"1\") {\n  estado = \"1\";\n} else if (string == \"0\"){\n  estado = \"0\";\n} else {\n  estado = \"9\";\n}\n\n//Extraigo timestamp del mensaje\nvar time = msg.payload.rxInfo[0].time;\n\n//Armo estructura con valor de DI y timestamp\nvar newMsg = {payload: estado, topic: \"DO\", timestamp: time, rssi: rssi, snr: snr};\n\nreturn newMsg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1200,
        "wires": [
            [
                "e25d0eb676256ca5",
                "ab5a0f7d0803019f"
            ]
        ]
    },
    {
        "id": "29cb69cacd87876e",
        "type": "interval-length",
        "z": "d2eb47fc2fa390b1",
        "format": "mills",
        "bytopic": true,
        "minimum": "",
        "maximum": "",
        "window": "",
        "timeout": false,
        "msgTimeout": "",
        "minimumunit": "msecs",
        "maximumunit": "msecs",
        "windowunit": "msecs",
        "msgTimeoutUnit": "msecs",
        "reset": false,
        "startup": false,
        "msgField": "payload",
        "timestampField": "time",
        "repeatTimeout": false,
        "name": "Inervalos",
        "x": 1540,
        "y": 1120,
        "wires": [
            [
                "e799e218c777a02e"
            ],
            []
        ]
    },
    {
        "id": "5075ba1e8845c19d",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Extract RSSI y SNR",
        "func": "//Extraigo timestamp del mensaje\ntime = msg.timestamp;\n\n//Tomo el valor de rssi\nrssi = msg.rssi;\n\n//Tomo el valor de snr\nsnr = msg.snr;\n\n//Armo estructura con valor de AI y timestamp\nvar msg_rssi = {payload: rssi, topic: \"RSSI\", timestamp: time};\n\n//Armo estructura con valor de AI y timestamp\nvar msg_snr = {payload: snr, topic:\"SNR\", timestamp: time};\n\nreturn [msg_rssi, msg_snr];",
        "outputs": 2,
        "noerr": 0,
        "x": 1580,
        "y": 1200,
        "wires": [
            [
                "c28ba4a0b2a119a1"
            ],
            [
                "5b84c86a534f5055"
            ]
        ]
    },
    {
        "id": "e1ce1284e0c71010",
        "type": "link in",
        "z": "d2eb47fc2fa390b1",
        "name": "Calidad E",
        "links": [
            "ab5a0f7d0803019f"
        ],
        "x": 1415,
        "y": 1160,
        "wires": [
            [
                "5075ba1e8845c19d",
                "29cb69cacd87876e"
            ]
        ]
    },
    {
        "id": "e799e218c777a02e",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "A minutos",
        "func": "//guardo los milisegundos de entrada\nms = msg.payload;\n\n//paso a minutos\nmin = ms / 1000 / 60;\n\n//armo mensaje\nmsg.payload = min.toFixed(2);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 1700,
        "y": 1120,
        "wires": [
            [
                "d76d012f74865392"
            ]
        ]
    },
    {
        "id": "4cb35fb3d8c502ae",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 1710,
        "y": 1080,
        "wires": [
            [
                "d76d012f74865392"
            ]
        ]
    },
    {
        "id": "d76d012f74865392",
        "type": "ui_chart",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "group": "a079b2a5.c7085",
        "order": 1,
        "width": 24,
        "height": 6,
        "label": "Intervalos",
        "chartType": "line",
        "legend": "true",
        "xformat": "dd HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": "24",
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#39aa31",
            "#ff330f",
            "#b159d9",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "x": 1860,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "08bbf47bd156be82",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 530,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "aa90fefce65d105f",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 530,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "d0378b8e4ccd254f",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 530,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "d5bf56d75443b268",
        "type": "Stackhero-MySQL",
        "z": "89ac413fc4a2dfe4",
        "server": "2f06ff7.de84f",
        "name": "",
        "x": 530,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "69e43c42e6eb8ad1",
        "type": "inject",
        "z": "d018cc37328048f5",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[31]",
        "payloadType": "json",
        "x": 380,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "f7cc977aa24e0a0b",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Comando DO",
        "func": "var comando = msg.payload[0];\n\n// Entra si recibe estado de DO y chequea que coincida con el ultimo comando\n// Si no coincide, manda comando para activar o desactivar segun corresponda\nif (msg.topic === \"DO\" && context.DOB != undefined) {\n    if (context.comando != msg.payload.valor) { \n        if (context.DOB == 1) { \n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n            return msg;}\n        else if (context.DOB === 0){\n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n            return msg;}\n    }\n    else return null;\n}\n\n// Guardo el comando para tener registro del ultimo valor requerido\ncontext.DOB = comando;\n\nvar debug = {comando: comando, aux: context.comando};\nnode.warn(debug);\n\n// Manda comando por MQTT\n\nif (comando == 1) { \n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n    return msg;}\n   \nelse if (comando === 0){\n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n    return msg;}\n    \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1040,
        "wires": [
            [
                "4dc07c98b3782cf7"
            ]
        ]
    },
    {
        "id": "dac213b110b9bc38",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Comando DO",
        "func": "var comando = msg.payload[0];\n\n// Entra si recibe estado de DO y chequea que coincida con el ultimo comando\n// Si no coincide, manda comando para activar o desactivar segun corresponda\nif (msg.topic === \"DO\" && context.DOC != undefined) {\n    if (context.comando != msg.payload.valor) { \n        if (context.DOC == 1) { \n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n            return msg;}\n        else if (context.DOC === 0){\n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n            return msg;}\n    }\n    else return null;\n}\n\n// Guardo el comando para tener registro del ultimo valor requerido\ncontext.DOC = comando;\n\nvar debug = {comando: comando, aux: context.comando};\nnode.warn(debug);\n\n// Manda comando por MQTT\n\nif (comando == 1) { \n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n    return msg;}\n   \nelse if (comando === 0){\n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n    return msg;}\n    \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1260,
        "wires": [
            [
                "922c50a96c2d20b6"
            ]
        ]
    },
    {
        "id": "17cb8febb0cb91d1",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Comando DO",
        "func": "var comando = msg.payload[0];\n\n// Entra si recibe estado de DO y chequea que coincida con el ultimo comando\n// Si no coincide, manda comando para activar o desactivar segun corresponda\nif (msg.topic === \"DO\" && context.DOD != undefined) {\n    if (context.comando != msg.payload.valor) { \n        if (context.DOD == 1) { \n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n            return msg;}\n        else if (context.DOD === 0){\n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n            return msg;}\n    }\n    else return null;\n}\n\n// Guardo el comando para tener registro del ultimo valor requerido\ncontext.DOD = comando;\n\nvar debug = {comando: comando, aux: context.comando};\nnode.warn(debug);\n\n// Manda comando por MQTT\n\nif (comando == 1) { \n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n    return msg;}\n   \nelse if (comando === 0){\n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n    return msg;}\n    \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1480,
        "wires": [
            [
                "3abcbf2ea0b1a41a"
            ]
        ]
    },
    {
        "id": "d65864bf8ff500ca",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Comando DO",
        "func": "var comando = msg.payload[0];\n\n// Entra si recibe estado de DO y chequea que coincida con el ultimo comando\n// Si no coincide, manda comando para activar o desactivar segun corresponda\nif (msg.topic === \"DO\" && context.DOE != undefined) {\n    if (context.comando != msg.payload.valor) { \n        if (context.DOE == 1) { \n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n            return msg;}\n        else if (context.DOE === 0){\n            msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n            return msg;}\n    }\n    else return null;\n}\n\n// Guardo el comando para tener registro del ultimo valor requerido\ncontext.DOE = comando;\n\nvar debug = {comando: comando, aux: context.comando};\nnode.warn(debug);\n\n// Manda comando por MQTT\n\nif (comando == 1) { \n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQEA/w==\"};\n    return msg;}\n   \nelse if (comando === 0){\n    msg.payload = {\"confirmed\": true,\"fport\": 85,\"data\": \"CQAA/w==\"};\n    return msg;}\n    \nreturn null;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 1700,
        "wires": [
            [
                "def03f0a1a709ad0"
            ]
        ]
    },
    {
        "id": "0f616f4519c42a26",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Logeo DB - Nodo A",
        "func": "//Separo valores de estructura\nvalor = msg.payload;\ntime = msg.timestamp;\ntopic = msg.topic;\nrssi = msg.rssi;\nsnr = msg.snr;\n\n//Paso a segundos el timestamp\nvar d = new Date(time);\ntimestamp = Math.trunc(d / 1000);\n\n//Extraigo mes del timestamp\nvar mes = d.getMonth() + 1 ;\n\n//Cargo payload y topic para cargar en base de datos\nmsg.payload =  {topic: topic, valor: valor, rssi: rssi, snr: snr, timestamp: timestamp, mes: mes};\n\nmsg.topic = \"INSERT INTO EEN054 (fk, valor, rssi, snr, timestamp, mes) VALUES (:topic, :valor, :rssi, :snr, :timestamp, :mes);\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 120,
        "wires": [
            [
                "ea9edae5424e9737"
            ]
        ]
    },
    {
        "id": "e36e38acbaaa714f",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Logeo DB - Nodo B",
        "func": "//Separo valores de estructura\nvalor = msg.payload;\ntime = msg.timestamp;\ntopic = msg.topic;\nrssi = msg.rssi;\nsnr = msg.snr;\n\n//Paso a segundos el timestamp\nvar d = new Date(time);\ntimestamp = Math.trunc(d / 1000);\n\n//Extraigo mes del timestamp\nvar mes = d.getMonth() + 1 ;\n\n//Cargo payload y topic para cargar en base de datos\nmsg.payload =  {topic: topic, valor: valor, rssi: rssi, snr: snr, timestamp: timestamp, mes: mes};\n\nmsg.topic = \"INSERT INTO EEN038 (fk, valor, rssi, snr, timestamp, mes) VALUES (:topic, :valor, :rssi, :snr, :timestamp, :mes);\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "08bbf47bd156be82"
            ]
        ]
    },
    {
        "id": "0f38438e71d03a2c",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Logeo DB - Nodo C",
        "func": "//Separo valores de estructura\nvalor = msg.payload;\ntime = msg.timestamp;\ntopic = msg.topic;\nrssi = msg.rssi;\nsnr = msg.snr;\n\n//Paso a segundos el timestamp\nvar d = new Date(time);\ntimestamp = Math.trunc(d / 1000);\n\n//Extraigo mes del timestamp\nvar mes = d.getMonth() + 1 ;\n\n//Cargo payload y topic para cargar en base de datos\nmsg.payload =  {topic: topic, valor: valor, rssi: rssi, snr: snr, timestamp: timestamp, mes: mes};\n\nmsg.topic = \"INSERT INTO EEN041 (fk, valor, rssi, snr, timestamp, mes) VALUES (:topic, :valor, :rssi, :snr, :timestamp, :mes);\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 440,
        "wires": [
            [
                "aa90fefce65d105f"
            ]
        ]
    },
    {
        "id": "d67a087f10dd7317",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Logeo DB - Nodo D",
        "func": "//Separo valores de estructura\nvalor = msg.payload;\ntime = msg.timestamp;\ntopic = msg.topic;\nrssi = msg.rssi;\nsnr = msg.snr;\n\n//Paso a segundos el timestamp\nvar d = new Date(time);\ntimestamp = Math.trunc(d / 1000);\n\n//Extraigo mes del timestamp\nvar mes = d.getMonth() + 1 ;\n\n//Cargo payload y topic para cargar en base de datos\nmsg.payload =  {topic: topic, valor: valor, rssi: rssi, snr: snr, timestamp: timestamp, mes: mes};\n\nmsg.topic = \"INSERT INTO EEN048 (fk, valor, rssi, snr, timestamp, mes) VALUES (:topic, :valor, :rssi, :snr, :timestamp, :mes);\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 620,
        "wires": [
            [
                "d0378b8e4ccd254f"
            ]
        ]
    },
    {
        "id": "75e0fde05ecb66ac",
        "type": "function",
        "z": "89ac413fc4a2dfe4",
        "name": "Logeo DB - Nodo E",
        "func": "//Separo valores de estructura\nvalor = msg.payload;\ntime = msg.timestamp;\ntopic = msg.topic;\nrssi = msg.rssi;\nsnr = msg.snr;\n\n//Paso a segundos el timestamp\nvar d = new Date(time);\ntimestamp = Math.trunc(d / 1000);\n\n//Extraigo mes del timestamp\nvar mes = d.getMonth() + 1 ;\n\n//Cargo payload y topic para cargar en base de datos\nmsg.payload =  {topic: topic, valor: valor, rssi: rssi, snr: snr, timestamp: timestamp, mes: mes};\n\nmsg.topic = \"INSERT INTO EEN047 (fk, valor, rssi, snr, timestamp, mes) VALUES (:topic, :valor, :rssi, :snr, :timestamp, :mes);\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 780,
        "wires": [
            [
                "d5bf56d75443b268"
            ]
        ]
    },
    {
        "id": "9cc99acafbc39d17",
        "type": "inject",
        "z": "a59f2133521cf34f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[]",
        "payloadType": "json",
        "x": 690,
        "y": 140,
        "wires": [
            [
                "4e83b476b8d79cda"
            ]
        ]
    },
    {
        "id": "b860b132d08fe7bd",
        "type": "function",
        "z": "d018cc37328048f5",
        "name": "Modbus Escritura",
        "func": "if(msg.payload[0] === undefined)\n    return null;\n\nsize = msg.payload.length;\n\n//while(size--) if(msg.payload[size] === undefined) msg.payload[size] = 0;\n\n\n//Inicializo Variables\nvar Estado_COM = 0;\n\nmsg.topic =\"Tabla Modbus\";\n\n//Cargo tiempos para cuentas\nlet TPK_time = new Date(1988,0,1);\nTPK_time /= 1000;\nlet now = new Date();\n\n//Nodo A\nvar v_valores_A1a = float32ToUint16(parseFloat(msg.payload[0].valor));\nvar v_valores_A2a = float32ToUint16(parseFloat(msg.payload[1].valor));\nvar v_valores_DIa =   Math.trunc(msg.payload[2].valor);\nvar v_valores_DOa =   Math.trunc(msg.payload[3].valor);\nvar v_valores_RSSIa =  Math.trunc(msg.payload[4].valor * -1);\nvar v_valores_SNRa =   Math.trunc(msg.payload[5].valor);\nvar v_valores_TimestampA = Math.trunc(msg.payload[6].valor);\n\nvar fechahoraA = v_valores_TimestampA - TPK_time;\n\n//Estado de comunicacion\ntime_dif_A = (now.getTime()/1000) - v_valores_TimestampA; // resta entre hora actual y ultimo mensaje\ntime_dif_A = time_dif_A / 60; //paso a minutos\n\nif (time_dif_A < 30) \n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_A = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_A = 1;\n\n//Nodo B\nvar v_valores_A1b = float32ToUint16(parseFloat(msg.payload[7].valor));\nvar v_valores_A2b = float32ToUint16(parseFloat(msg.payload[8].valor));\nvar v_valores_DIb = Math.trunc(msg.payload[9].valor);\nvar v_valores_DOb = Math.trunc(msg.payload[10].valor);\nvar v_valores_RSSIb = Math.trunc(msg.payload[11].valor * -1);\nvar v_valores_SNRb =   Math.trunc(msg.payload[12].valor);\nvar v_valores_TimestampB = Math.trunc(msg.payload[13].valor);\n\nvar fechahoraB = v_valores_TimestampB - TPK_time;\n\n//Estado de comunicacion\ntime_dif_B = (now.getTime()/1000) - v_valores_TimestampB; // resta entre hora actual y ultimo mensaje\ntime_dif_B = time_dif_B / 60; //paso a minutos\n\nif (time_dif_B < 30) \n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_B = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_B = 1;\n\n//Nodo C\nvar v_valores_A1c = float32ToUint16(parseFloat(msg.payload[14].valor));\nvar v_valores_A2c = float32ToUint16(parseFloat(msg.payload[15].valor));\nvar v_valores_DIc = Math.trunc(msg.payload[16].valor);\nvar v_valores_DOc = Math.trunc(msg.payload[17].valor);\nvar v_valores_RSSIc = Math.trunc(msg.payload[18].valor * -1);\nvar v_valores_SNRc =  Math.trunc(msg.payload[19].valor);\nvar v_valores_TimestampC = Math.trunc(msg.payload[20].valor);\n\nvar fechahoraC = v_valores_TimestampC - TPK_time;\n\n//Estado de comunicacion\ntime_dif_C = (now.getTime()/1000) - v_valores_TimestampC; // resta entre hora actual y ultimo mensaje\ntime_dif_C = time_dif_C / 60; //paso a minutos\n\nif (time_dif_C < 30) \n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_C = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_C = 1;\n\n//Nodo D\nvar v_valores_A1d = float32ToUint16(parseFloat(msg.payload[21].valor));\nvar v_valores_A2d = float32ToUint16(parseFloat(msg.payload[22].valor));\nvar v_valores_DId =  Math.trunc(msg.payload[23].valor);\nvar v_valores_DOd =  Math.trunc(msg.payload[24].valor);\nvar v_valores_RSSId = Math.trunc(msg.payload[25].valor * -1);\nvar v_valores_SNRd =  Math.trunc(msg.payload[26].valor);\nvar v_valores_TimestampD = Math.trunc(msg.payload[27].valor);\n\nvar fechahoraD = v_valores_TimestampD - TPK_time;\n\n//Estado de comunicacion\ntime_dif_D = (now.getTime()/1000) - v_valores_TimestampD; // resta entre hora actual y ultimo mensaje\ntime_dif_D = time_dif_D / 60; //paso a minutos\n\nif (time_dif_D < 30)\n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_D = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_D = 1;\n\n//Nodo E\nvar v_valores_A1e = float32ToUint16(parseFloat(msg.payload[28].valor));\nvar v_valores_A2e = float32ToUint16(parseFloat(msg.payload[29].valor));\nvar v_valores_DIe =  Math.trunc(msg.payload[30].valor);\nvar v_valores_DOe =  Math.trunc(msg.payload[31].valor);\nvar v_valores_RSSIe = Math.trunc(msg.payload[32].valor * -1);\nvar v_valores_SNRe =  Math.trunc(msg.payload[33].valor);\nvar v_valores_TimestampE = Math.trunc(msg.payload[34].valor);\n\nvar fechahoraE = v_valores_TimestampE - TPK_time;\n\n//Estado de comunicacion\ntime_dif_E = (now.getTime()/1000) - v_valores_TimestampE; // resta entre hora actual y ultimo mensaje\ntime_dif_E = time_dif_E / 60; //paso a minutos\n\nif (time_dif_E < 30) \n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_E = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_E = 1;\n\n//Armado de Entradas Digitales DIs\nvar v_valores_DIs = 0;\nv_valores_DIs = v_valores_DIa | (v_valores_DIb << 1) | (v_valores_DIc << 2) | (v_valores_DId << 3) | (v_valores_DIe << 4);\n\n//Armado de Salidas Digitales DOs\nvar v_valores_DOs = 0;\nv_valores_DOs = v_valores_DOa | (v_valores_DOb << 1) | (v_valores_DOc << 2) | (v_valores_DOd << 3) | (v_valores_DOe << 4);\n\n//Armado de Estado de Comunicación\nvar v_estado_COM = 0;\nv_estado_COM = Estado_COM_A | (Estado_COM_B << 1) | (Estado_COM_C << 2) | (Estado_COM_D << 3) | (Estado_COM_E << 4);\n\n//Armado de vector\nlet v_valores = [];\n\nv_valores[0] = v_valores_A1a[0];\nv_valores[1] = v_valores_A1a[1];\nv_valores[2] = v_valores_A2a[0];\nv_valores[3] = v_valores_A2a[1];\nv_valores[4] = v_valores_RSSIa;\nv_valores[5] = v_valores_SNRa;\nv_valores[6] = fechahoraA >>> 16;\nv_valores[7] = fechahoraA  & 0xFFFF;\n\nv_valores[8] = v_valores_A1b[0];\nv_valores[9] = v_valores_A1b[1];\nv_valores[10] = v_valores_A2b[0];\nv_valores[11] = v_valores_A2b[1];\nv_valores[12] = v_valores_RSSIb;\nv_valores[13] = v_valores_SNRb;\nv_valores[14] = fechahoraB >>> 16;\nv_valores[15] = fechahoraB  & 0xFFFF;\n\nv_valores[16] = v_valores_A1c[0];\nv_valores[17] = v_valores_A1c[1];\nv_valores[18] = v_valores_A2c[0];\nv_valores[19] = v_valores_A2c[1];\nv_valores[20] = v_valores_RSSIc;\nv_valores[21] = v_valores_SNRc;\nv_valores[22] = fechahoraC >>> 16;\nv_valores[23] = fechahoraC  & 0xFFFF;\n\nv_valores[24] = v_valores_A1d[0];\nv_valores[25] = v_valores_A1d[1];\nv_valores[26] = v_valores_A2d[0];\nv_valores[27] = v_valores_A2d[1];\nv_valores[28] = v_valores_RSSId;\nv_valores[29] = v_valores_SNRd;\nv_valores[30] = fechahoraD >>> 16;\nv_valores[31] = fechahoraD  & 0xFFFF;\n\nv_valores[32] = v_valores_A1e[0];\nv_valores[33] = v_valores_A1e[1];\nv_valores[34] = v_valores_A2e[0];\nv_valores[35] = v_valores_A2e[1];\nv_valores[36] = v_valores_RSSIe;\nv_valores[37] = v_valores_SNRe;\nv_valores[38] = fechahoraE >>> 16;\nv_valores[39] = fechahoraE  & 0xFFFF;\n\nv_valores[40] = v_valores_DIs;\nv_valores[41] = v_valores_DOs;\nv_valores[42] = v_estado_COM; // Falla de comunicación\n\n//Si SNR es menor a 0, lo igual a 0 para evitar error en modbus\nfor (var i = 5; i < 42; i=i+8) {\nif (v_valores[i] < 0)\n    v_valores[i] = 0;\n}\n\nfunction float32ToUint16(value) {\n  var buffer = new ArrayBuffer(4);\n  var intView = new Uint16Array(buffer);\n  var floatView = new Float32Array(buffer);\n\n  floatView[0] = value;\n  return [intView[0], intView[1]];\n}\n\ndebug = {\n    'Estado_COM_A': Estado_COM_A,\n    'Estado_COM_B': Estado_COM_B,\n    'Estado_COM_C': Estado_COM_C,\n    'Estado_COM_D': Estado_COM_D,\n    'Estado_COM_E': Estado_COM_E\n    }\n\n//node.warn(debug);\n\nmsg.payload = {\n    value: v_valores,\n    'fc':16,\n    'unitid':1,\n    'address':0,\n    'quantity':43 }\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 200,
        "wires": [
            [
                "512f4c337d5e0478",
                "8a1197ed088e3b2d"
            ]
        ]
    },
    {
        "id": "d874befe261baad7",
        "type": "debug",
        "z": "d018cc37328048f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 160,
        "wires": []
    },
    {
        "id": "3212aa4df9909d58",
        "type": "debug",
        "z": "d018cc37328048f5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 760,
        "wires": []
    },
    {
        "id": "88b4db108da7e83e",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Valores de escalado",
        "func": "//Carga de valores por default de escalado\n//Entrada analógica 1\nAI1_min = 0;\nAI1_max = 105.46;\n\n//Entrada analógica 2\nAI2_min = 0;\nAI2_max = 100;\n\nvalores_escalado = {\n    AI1_min: AI1_min,\n    AI1_max: AI1_max,\n    AI2_min: AI2_min,\n    AI2_max: AI2_max\n}\n\nflow.set('escalado', valores_escalado, \"File\", function(err) {\n            if (err)\n                node.error(err);\n            else \n                node.warn(\"Valores de escalado actualizados exitosamente\");\n        });\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "809c32cb78156964",
        "type": "inject",
        "z": "d2eb47fc2fa390b1",
        "name": "Cargar manual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "manual",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "88b4db108da7e83e"
            ]
        ]
    },
    {
        "id": "d87d1206e76ebc7d",
        "type": "comment",
        "z": "d2eb47fc2fa390b1",
        "name": "Sistema de pozos Rebombeo Parque San Martín",
        "info": "",
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "5e6a219217deed3c",
        "type": "link out",
        "z": "d2eb47fc2fa390b1",
        "name": "UC1122 A - MQTT",
        "links": [
            "e65ebb90cb354a2e",
            "730c5c8c8aae3a85"
        ],
        "x": 1215,
        "y": 100,
        "wires": []
    },
    {
        "id": "e65ebb90cb354a2e",
        "type": "link in",
        "z": "89ac413fc4a2dfe4",
        "name": "UC1122 A - SQL",
        "links": [
            "5e6a219217deed3c"
        ],
        "x": 195,
        "y": 120,
        "wires": [
            [
                "0f616f4519c42a26"
            ]
        ]
    },
    {
        "id": "3b655ea46c49b452",
        "type": "link out",
        "z": "d2eb47fc2fa390b1",
        "name": "UC1122 B - MQTT",
        "links": [
            "ea43faa8a96d31e7",
            "9efdea20dfb92447"
        ],
        "x": 1215,
        "y": 360,
        "wires": []
    },
    {
        "id": "f8e3749e4ea9eb27",
        "type": "link out",
        "z": "d2eb47fc2fa390b1",
        "name": "UC1122 C - MQTT",
        "links": [
            "951be55abaa84e2b",
            "c957f1452947276a"
        ],
        "x": 1215,
        "y": 640,
        "wires": []
    },
    {
        "id": "2541609aa170a733",
        "type": "link out",
        "z": "d2eb47fc2fa390b1",
        "name": "UC1122 D - MQTT",
        "links": [
            "69b59ef2d778edac",
            "86b39752d1cd22fe"
        ],
        "x": 1215,
        "y": 900,
        "wires": []
    },
    {
        "id": "ab5a0f7d0803019f",
        "type": "link out",
        "z": "d2eb47fc2fa390b1",
        "name": "UC1122 E - MQTT",
        "links": [
            "b8eb60be82b8a880",
            "e1ce1284e0c71010"
        ],
        "x": 1215,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ea43faa8a96d31e7",
        "type": "link in",
        "z": "89ac413fc4a2dfe4",
        "name": "UC1122 B - SQL",
        "links": [
            "3b655ea46c49b452"
        ],
        "x": 195,
        "y": 280,
        "wires": [
            [
                "e36e38acbaaa714f"
            ]
        ]
    },
    {
        "id": "951be55abaa84e2b",
        "type": "link in",
        "z": "89ac413fc4a2dfe4",
        "name": "UC1122 C - SQL",
        "links": [
            "f8e3749e4ea9eb27"
        ],
        "x": 195,
        "y": 440,
        "wires": [
            [
                "0f38438e71d03a2c"
            ]
        ]
    },
    {
        "id": "69b59ef2d778edac",
        "type": "link in",
        "z": "89ac413fc4a2dfe4",
        "name": "UC1122 D - SQL",
        "links": [
            "2541609aa170a733"
        ],
        "x": 195,
        "y": 620,
        "wires": [
            [
                "d67a087f10dd7317"
            ]
        ]
    },
    {
        "id": "b8eb60be82b8a880",
        "type": "link in",
        "z": "89ac413fc4a2dfe4",
        "name": "UC1122 E - SQL",
        "links": [
            "ab5a0f7d0803019f"
        ],
        "x": 195,
        "y": 780,
        "wires": [
            [
                "75e0fde05ecb66ac"
            ]
        ]
    },
    {
        "id": "19da18144c790956",
        "type": "ui_button",
        "z": "d2eb47fc2fa390b1",
        "name": "Carga",
        "group": "aa31efabc380905c",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Cargar nuevos valores",
        "tooltip": "Carga los valores de escalado ingresados",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "0e2cd8606f38a860"
            ]
        ]
    },
    {
        "id": "205e96db0cac5488",
        "type": "ui_text_input",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "label": "Valor mínimo AI1",
        "tooltip": "Ingrese el valor minímo del rango de escalado",
        "group": "aa31efabc380905c",
        "order": 1,
        "width": 6,
        "height": 1,
        "passthru": true,
        "mode": "text",
        "delay": "0",
        "topic": "",
        "topicType": "str",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "c1dc90a62b4bd573"
            ]
        ]
    },
    {
        "id": "17c0932def28cc90",
        "type": "ui_text_input",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "label": "Valor Máximo AI1",
        "tooltip": "Ingrese el valor maximo del rango de escalado",
        "group": "aa31efabc380905c",
        "order": 3,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "AI1_max",
        "topicType": "str",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "b7178bba06a81f41"
            ]
        ]
    },
    {
        "id": "43d063aa61defd84",
        "type": "ui_text_input",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "label": "Valor mínimo AI2",
        "tooltip": "Ingrese el valor minímo del rango de escalado",
        "group": "aa31efabc380905c",
        "order": 4,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "AI2_min",
        "topicType": "str",
        "x": 150,
        "y": 280,
        "wires": [
            [
                "2897af92800a193e"
            ]
        ]
    },
    {
        "id": "f5eafb912d6a237e",
        "type": "ui_text_input",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "label": "Valor Máximo AI2",
        "tooltip": "Ingrese el valor maximo del rango de escalado",
        "group": "aa31efabc380905c",
        "order": 5,
        "width": 6,
        "height": 1,
        "passthru": false,
        "mode": "text",
        "delay": "0",
        "topic": "AI1_max",
        "topicType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "3c3c76c581584195"
            ]
        ]
    },
    {
        "id": "c1dc90a62b4bd573",
        "type": "change",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AI1_min",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "593555e0a7defaeb",
        "type": "ui_toast",
        "z": "d2eb47fc2fa390b1",
        "position": "top right",
        "displayTime": "1",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "",
        "name": "Notificación",
        "x": 450,
        "y": 400,
        "wires": []
    },
    {
        "id": "b7178bba06a81f41",
        "type": "change",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AI1_max",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "2897af92800a193e",
        "type": "change",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AI2_min",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "3c3c76c581584195",
        "type": "change",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "AI2_max",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e9d12bdfe23aca07",
        "type": "ui_text",
        "z": "d2eb47fc2fa390b1",
        "group": "aa31efabc380905c",
        "order": 2,
        "width": 6,
        "height": 4,
        "name": "Valores Actuales",
        "label": "",
        "format": "{{msg.mensaje}}",
        "layout": "col-center",
        "x": 460,
        "y": 440,
        "wires": []
    },
    {
        "id": "0e2cd8606f38a860",
        "type": "function",
        "z": "d2eb47fc2fa390b1",
        "name": "Carga",
        "func": "//Carga de valores por default de escalado\n\n//Cargo valores de escalado ingresados por caja de texto\n//Si no hay valor cargado deja el actual\nflow.get(['AI1_min','AI1_max','AI2_min','AI2_max'], function(err, v1, v2, v3, v4) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else\n        AI1_min = v1 || v_actuales.AI1_min; \n        AI1_max = v2 || v_actuales.AI1_max;\n        AI2_min = v3 || v_actuales.AI2_min;\n        AI2_max = v4 || v_actuales.AI2_max;\n});\n\ncarga_escalado = {\n    AI1_min: parseFloat(AI1_min),\n    AI1_max: parseFloat(AI1_max),\n    AI2_min: parseFloat(AI2_min),\n    AI2_max: parseFloat(AI2_max)\n}\n\nflow.set('escalado', carga_escalado, \"File\", function(err) {\n            if (err){\n                node.error(err);\n                node.warn(\"Error al cargar los valores de escalado. Por favor intente nuevamente\");\n                noti = \"Error al cargar los valores de escalado. Por favor intente nuevamente\";\n            }\n            else {\n                node.warn(\"Valores de escalado actualizados exitosamente\");\n                noti = \"Valores de escalado actualizados exitosamente\";\n            }\n        });\n\nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else escalado = val;\n});\n\n//Cargo los valores en auxiliares\nAI1_min = escalado.AI1_min;\nAI1_max = escalado.AI1_max;\nAI2_min = escalado.AI2_min;\nAI2_max = escalado.AI2_max;\n\n//Armo mensaje para dashboard\nmensaje = \"Valores actuales \" +\n        \"<br><br>Presión: \" +\n        \"<br>   Mínimo: \" + AI1_min + \" mca\" +\n        \"<br>   Máximo: \" + AI1_max + \" mca\" +\n        \"<br><br>Caudal: \" + \n        \"<br>   Mínimo: \" + AI2_min + \" m³/h\" +\n        \"<br>   Máximo: \" + AI2_max + \" m³/h\";\n\nmsg = {mensaje: mensaje,\n        payload: noti };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//Cargo valores de escalado actuales en v_actuales\nflow.get('escalado', \"File\", function(err, val) {\n    if (err){\n        node.error(err);\n        node.warn(\"Error al cargar los valores de escalado\");\n    }\n    else    {\n        v_actuales = val;\n    }\n});\n\n//Armo mensaje para dashboard\nmensaje = \"Valores actuales \" +\n        \"<br><br>Presión: \" +\n        \"<br>   Mínimo: \" + v_actuales.AI1_min + \" mca\" +\n        \"<br>   Máximo: \" + v_actuales.AI1_max + \" mca\" +\n        \"<br><br>Caudal: \" + \n        \"<br>   Mínimo: \" + v_actuales.AI2_min + \" m³/h\" +\n        \"<br>   Máximo: \" + v_actuales.AI2_max + \" m³/h\";\n\nmsg = {mensaje: mensaje};\n\nnode.send(msg);",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 400,
        "wires": [
            [
                "593555e0a7defaeb",
                "e9d12bdfe23aca07"
            ]
        ]
    },
    {
        "id": "785f890b1ee2e153",
        "type": "link out",
        "z": "d018cc37328048f5",
        "name": "Salida tabla Modbus",
        "links": [
            "30a5c2f0f5dc3d94"
        ],
        "x": 775,
        "y": 260,
        "wires": []
    },
    {
        "id": "30a5c2f0f5dc3d94",
        "type": "link in",
        "z": "3a458a9d04345417",
        "name": "Entrada tabla Modbus",
        "links": [
            "785f890b1ee2e153"
        ],
        "x": 95,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e375d4571d47b305",
        "type": "function",
        "z": "3a458a9d04345417",
        "name": "",
        "func": "valores = msg.payload.value;\n\n\n\n//Nodo A\nvar v_valores_A1a = float32ToUint16(parseFloat(msg.payload[0].valor));\nvar v_valores_A2a = float32ToUint16(parseFloat(msg.payload[1].valor));\nvar v_valores_DIa =   Math.trunc(msg.payload[2].valor);\nvar v_valores_DOa =   Math.trunc(msg.payload[3].valor);\nvar v_valores_RSSIa =  Math.trunc(msg.payload[4].valor * -1);\nvar v_valores_SNRa =   Math.trunc(msg.payload[5].valor);\nvar v_valores_TimestampA = Math.trunc(msg.payload[6].valor);\n\nvar fechahoraA = v_valores_TimestampA - TPK_time;\n\n//Estado de comunicacion\ntime_dif_A = (now.getTime()/1000) - v_valores_TimestampA; // resta entre hora actual y ultimo mensaje\ntime_dif_A = time_dif_A / 60; //paso a minutos\n\nif (time_dif_A < 30) \n//si la diferencia es menor a 30 minutos, la comunicación está bien\n    Estado_COM_A = 0;\nelse\n//flag de error si no hubo mensaje por 30 minutos\n    Estado_COM_A = 1;\n\n//Nodo B\nvar v_valores_A1b = float32ToUint16(parseFloat(msg.payload[7].valor));\nvar v_valores_A2b = float32ToUint16(parseFloat(msg.payload[8].valor));\nvar v_valores_DIb = Math.trunc(msg.payload[9].valor);\nvar v_valores_DOb = Math.trunc(msg.payload[10].valor);\nvar v_valores_RSSIb = Math.trunc(msg.payload[11].valor * -1);\nvar v_valores_SNRb =   Math.trunc(msg.payload[12].valor);\nvar v_valores_TimestampB = Math.trunc(msg.payload[13].valor);\n\n//Armado de Entradas Digitales DIs\nvar v_valores_DIs = 0;\nv_valores_DIs = v_valores_DIa | (v_valores_DIb << 1) | (v_valores_DIc << 2) | (v_valores_DId << 3) | (v_valores_DIe << 4);\n\n//Armado de Salidas Digitales DOs\nvar v_valores_DOs = 0;\nv_valores_DOs = v_valores_DOa | (v_valores_DOb << 1) | (v_valores_DOc << 2) | (v_valores_DOd << 3) | (v_valores_DOe << 4);\n\n//Armado de Estado de Comunicación\nvar v_estado_COM = 0;\nv_estado_COM = Estado_COM_A | (Estado_COM_B << 1) | (Estado_COM_C << 2) | (Estado_COM_D << 3) | (Estado_COM_E << 4);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "b59d0e869760db60",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Pozo 37 - Nodo A",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 490,
        "y": 60,
        "wires": []
    },
    {
        "id": "851ecb2b3abb9508",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Presión",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "38c3654dc2a455bb",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Caudal",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 460,
        "y": 160,
        "wires": []
    },
    {
        "id": "4d010f8a3815d0ee",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Estado de bomba",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 490,
        "y": 200,
        "wires": []
    },
    {
        "id": "e136ecb78419bd4f",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 5,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Hora ultimo mensaje",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 760,
        "y": 120,
        "wires": []
    },
    {
        "id": "051f2bd2c119077a",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 6,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Estado de la comunicación",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 780,
        "y": 160,
        "wires": []
    },
    {
        "id": "2d7daae5f58e3b11",
        "type": "ui_text",
        "z": "3a458a9d04345417",
        "group": "2686289828e6b176",
        "order": 7,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Calidad de señal",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "x": 750,
        "y": 200,
        "wires": []
    },
    {
        "id": "af4f7a2f7175d138",
        "type": "ui_template",
        "z": "3a458a9d04345417",
        "d": true,
        "group": "d160f7d66748447a",
        "name": "",
        "order": 13,
        "width": 0,
        "height": 0,
        "format": "<style>\n    \n\n.table\n{\n\n    width:500px;\n    background:lightblue;\nborder:1px solid black;\n//font-size:10px;\n}\n.main\n{\nheight:400px;\n\n}\n</style>\n<div class=\"main\">\n    <table class=\"table\">\n        <tr ng-repeat = \"payload in msg.payload\"><td ng-repeat =\"(key,value) in payload\">{{key}}: {{value}}</td></tr>\n\n    </table>\n    \n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 480,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "e74fc2cb81bc4ef5",
        "type": "function",
        "z": "3a458a9d04345417",
        "name": "Carga de tabla en template",
        "func": "//https://stevesnoderedguide.com/using-dashboard-template-node\n\n//http://noderedguide.com/tutorial-node-red-dashboards-creating-your-own-ui-widget/\n\nvar payload=[];\nvar obj={\"steve\":63,\"Bella\":56};\npayload.push(obj);\nvar obj={\"shanna\":30,\"saskia\":27};\npayload.push(obj);\nmsg.payload=payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 320,
        "wires": [
            [
                "af4f7a2f7175d138"
            ]
        ]
    },
    {
        "id": "512f4c337d5e0478",
        "type": "debug",
        "z": "d018cc37328048f5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 160,
        "wires": []
    },
    {
        "id": "43fcb54a1d615251",
        "type": "debug",
        "z": "d2eb47fc2fa390b1",
        "name": "NODO E",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 800,
        "wires": []
    },
    {
        "id": "b6bec9f4429cbfe8",
        "type": "debug",
        "z": "d2eb47fc2fa390b1",
        "name": "NODO A",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 760,
        "wires": []
    },
    {
        "id": "ca6fb4ef410e6c84",
        "type": "debug",
        "z": "d2eb47fc2fa390b1",
        "name": "nodo B",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 500,
        "wires": []
    },
    {
        "id": "0c90ca4af982fc76",
        "type": "debug",
        "z": "d2eb47fc2fa390b1",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 260,
        "wires": []
    }
]
